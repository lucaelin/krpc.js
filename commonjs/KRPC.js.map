{"version":3,"file":"KRPC.js","sources":["../lib/krpc.proto.js","../lib/proto.js","../lib/decoders.js","../lib/encoders.js","../lib/Service.js","../lib/krpc-service-legacy.js","../lib/KRPC.js"],"sourcesContent":["export default\n{\n  \"nested\": {\n    \"krpc\": {\n      \"nested\": {\n        \"schema\": {\n          \"options\": {\n            \"csharp_namespace\": \"KRPC.Schema.KRPC\",\n            \"java_package\": \"krpc.schema\",\n            \"java_outer_classname\": \"KRPC\",\n            \"objc_class_prefix\": \"KRPC\"\n          },\n          \"nested\": {\n            \"ConnectionRequest\": {\n              \"fields\": {\n                \"type\": {\n                  \"type\": \"Type\",\n                  \"id\": 1\n                },\n                \"clientName\": {\n                  \"type\": \"string\",\n                  \"id\": 2\n                },\n                \"clientIdentifier\": {\n                  \"type\": \"bytes\",\n                  \"id\": 3\n                }\n              },\n              \"nested\": {\n                \"Type\": {\n                  \"values\": {\n                    \"RPC\": 0,\n                    \"STREAM\": 1\n                  }\n                }\n              }\n            },\n            \"ConnectionResponse\": {\n              \"fields\": {\n                \"status\": {\n                  \"type\": \"Status\",\n                  \"id\": 1\n                },\n                \"message\": {\n                  \"type\": \"string\",\n                  \"id\": 2\n                },\n                \"clientIdentifier\": {\n                  \"type\": \"bytes\",\n                  \"id\": 3\n                }\n              },\n              \"nested\": {\n                \"Status\": {\n                  \"values\": {\n                    \"OK\": 0,\n                    \"MALFORMED_MESSAGE\": 1,\n                    \"TIMEOUT\": 2,\n                    \"WRONG_TYPE\": 3\n                  }\n                }\n              }\n            },\n            \"Request\": {\n              \"fields\": {\n                \"calls\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"ProcedureCall\",\n                  \"id\": 1\n                }\n              }\n            },\n            \"ProcedureCall\": {\n              \"fields\": {\n                \"service\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"procedure\": {\n                  \"type\": \"string\",\n                  \"id\": 2\n                },\n                \"serviceId\": {\n                  \"type\": \"uint32\",\n                  \"id\": 4\n                },\n                \"procedureId\": {\n                  \"type\": \"uint32\",\n                  \"id\": 5\n                },\n                \"arguments\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"Argument\",\n                  \"id\": 3\n                }\n              }\n            },\n            \"Argument\": {\n              \"fields\": {\n                \"position\": {\n                  \"type\": \"uint32\",\n                  \"id\": 1\n                },\n                \"value\": {\n                  \"type\": \"bytes\",\n                  \"id\": 2\n                }\n              }\n            },\n            \"Response\": {\n              \"fields\": {\n                \"error\": {\n                  \"type\": \"Error\",\n                  \"id\": 1\n                },\n                \"results\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"ProcedureResult\",\n                  \"id\": 2\n                }\n              }\n            },\n            \"ProcedureResult\": {\n              \"fields\": {\n                \"error\": {\n                  \"type\": \"Error\",\n                  \"id\": 1\n                },\n                \"value\": {\n                  \"type\": \"bytes\",\n                  \"id\": 2\n                }\n              }\n            },\n            \"Error\": {\n              \"fields\": {\n                \"service\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 2\n                },\n                \"description\": {\n                  \"type\": \"string\",\n                  \"id\": 3\n                },\n                \"stackTrace\": {\n                  \"type\": \"string\",\n                  \"id\": 4\n                }\n              }\n            },\n            \"StreamUpdate\": {\n              \"fields\": {\n                \"results\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"StreamResult\",\n                  \"id\": 1\n                }\n              }\n            },\n            \"StreamResult\": {\n              \"fields\": {\n                \"id\": {\n                  \"type\": \"uint64\",\n                  \"id\": 1\n                },\n                \"result\": {\n                  \"type\": \"ProcedureResult\",\n                  \"id\": 2\n                }\n              }\n            },\n            \"Services\": {\n              \"fields\": {\n                \"services\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"Service\",\n                  \"id\": 1\n                }\n              }\n            },\n            \"Service\": {\n              \"fields\": {\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"procedures\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"Procedure\",\n                  \"id\": 2\n                },\n                \"classes\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"Class\",\n                  \"id\": 3\n                },\n                \"enumerations\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"Enumeration\",\n                  \"id\": 4\n                },\n                \"exceptions\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"Exception\",\n                  \"id\": 5\n                },\n                \"documentation\": {\n                  \"type\": \"string\",\n                  \"id\": 6\n                }\n              }\n            },\n            \"Procedure\": {\n              \"fields\": {\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"parameters\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"Parameter\",\n                  \"id\": 2\n                },\n                \"returnType\": {\n                  \"type\": \"Type\",\n                  \"id\": 3\n                },\n                \"returnIsNullable\": {\n                  \"type\": \"bool\",\n                  \"id\": 4\n                },\n                \"gameScenes\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"GameScene\",\n                  \"id\": 6\n                },\n                \"documentation\": {\n                  \"type\": \"string\",\n                  \"id\": 5\n                }\n              },\n              \"nested\": {\n                \"GameScene\": {\n                  \"values\": {\n                    \"SPACE_CENTER\": 0,\n                    \"FLIGHT\": 1,\n                    \"TRACKING_STATION\": 2,\n                    \"EDITOR_VAB\": 3,\n                    \"EDITOR_SPH\": 4,\n                    \"MISSION_BUILDER\": 5\n                  }\n                }\n              }\n            },\n            \"Parameter\": {\n              \"fields\": {\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"type\": {\n                  \"type\": \"Type\",\n                  \"id\": 2\n                },\n                \"defaultValue\": {\n                  \"type\": \"bytes\",\n                  \"id\": 3\n                }\n              }\n            },\n            \"Class\": {\n              \"fields\": {\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"documentation\": {\n                  \"type\": \"string\",\n                  \"id\": 2\n                }\n              }\n            },\n            \"Enumeration\": {\n              \"fields\": {\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"values\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"EnumerationValue\",\n                  \"id\": 2\n                },\n                \"documentation\": {\n                  \"type\": \"string\",\n                  \"id\": 3\n                }\n              }\n            },\n            \"EnumerationValue\": {\n              \"fields\": {\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"value\": {\n                  \"type\": \"int32\",\n                  \"id\": 2\n                },\n                \"documentation\": {\n                  \"type\": \"string\",\n                  \"id\": 3\n                }\n              }\n            },\n            \"Exception\": {\n              \"fields\": {\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"documentation\": {\n                  \"type\": \"string\",\n                  \"id\": 2\n                }\n              }\n            },\n            \"Type\": {\n              \"fields\": {\n                \"code\": {\n                  \"type\": \"TypeCode\",\n                  \"id\": 1\n                },\n                \"service\": {\n                  \"type\": \"string\",\n                  \"id\": 2\n                },\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 3\n                },\n                \"types\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"Type\",\n                  \"id\": 4\n                }\n              },\n              \"nested\": {\n                \"TypeCode\": {\n                  \"values\": {\n                    \"NONE\": 0,\n                    \"DOUBLE\": 1,\n                    \"FLOAT\": 2,\n                    \"SINT32\": 3,\n                    \"SINT64\": 4,\n                    \"UINT32\": 5,\n                    \"UINT64\": 6,\n                    \"BOOL\": 7,\n                    \"STRING\": 8,\n                    \"BYTES\": 9,\n                    \"CLASS\": 100,\n                    \"ENUMERATION\": 101,\n                    \"EVENT\": 200,\n                    \"PROCEDURE_CALL\": 201,\n                    \"STREAM\": 202,\n                    \"STATUS\": 203,\n                    \"SERVICES\": 204,\n                    \"TUPLE\": 300,\n                    \"LIST\": 301,\n                    \"SET\": 302,\n                    \"DICTIONARY\": 303\n                  }\n                }\n              }\n            },\n            \"Tuple\": {\n              \"fields\": {\n                \"items\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"bytes\",\n                  \"id\": 1\n                }\n              }\n            },\n            \"List\": {\n              \"fields\": {\n                \"items\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"bytes\",\n                  \"id\": 1\n                }\n              }\n            },\n            \"Set\": {\n              \"fields\": {\n                \"items\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"bytes\",\n                  \"id\": 1\n                }\n              }\n            },\n            \"Dictionary\": {\n              \"fields\": {\n                \"entries\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"DictionaryEntry\",\n                  \"id\": 1\n                }\n              }\n            },\n            \"DictionaryEntry\": {\n              \"fields\": {\n                \"key\": {\n                  \"type\": \"bytes\",\n                  \"id\": 1\n                },\n                \"value\": {\n                  \"type\": \"bytes\",\n                  \"id\": 2\n                }\n              }\n            },\n            \"Stream\": {\n              \"fields\": {\n                \"id\": {\n                  \"type\": \"uint64\",\n                  \"id\": 1\n                }\n              }\n            },\n            \"Event\": {\n              \"fields\": {\n                \"stream\": {\n                  \"type\": \"Stream\",\n                  \"id\": 1\n                }\n              }\n            },\n            \"Status\": {\n              \"fields\": {\n                \"version\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"bytesRead\": {\n                  \"type\": \"uint64\",\n                  \"id\": 2\n                },\n                \"bytesWritten\": {\n                  \"type\": \"uint64\",\n                  \"id\": 3\n                },\n                \"bytesReadRate\": {\n                  \"type\": \"float\",\n                  \"id\": 4\n                },\n                \"bytesWrittenRate\": {\n                  \"type\": \"float\",\n                  \"id\": 5\n                },\n                \"rpcsExecuted\": {\n                  \"type\": \"uint64\",\n                  \"id\": 6\n                },\n                \"rpcRate\": {\n                  \"type\": \"float\",\n                  \"id\": 7\n                },\n                \"oneRpcPerUpdate\": {\n                  \"type\": \"bool\",\n                  \"id\": 8\n                },\n                \"maxTimePerUpdate\": {\n                  \"type\": \"uint32\",\n                  \"id\": 9\n                },\n                \"adaptiveRateControl\": {\n                  \"type\": \"bool\",\n                  \"id\": 10\n                },\n                \"blockingRecv\": {\n                  \"type\": \"bool\",\n                  \"id\": 11\n                },\n                \"recvTimeout\": {\n                  \"type\": \"uint32\",\n                  \"id\": 12\n                },\n                \"timePerRpcUpdate\": {\n                  \"type\": \"float\",\n                  \"id\": 13\n                },\n                \"pollTimePerRpcUpdate\": {\n                  \"type\": \"float\",\n                  \"id\": 14\n                },\n                \"execTimePerRpcUpdate\": {\n                  \"type\": \"float\",\n                  \"id\": 15\n                },\n                \"streamRpcs\": {\n                  \"type\": \"uint32\",\n                  \"id\": 16\n                },\n                \"streamRpcsExecuted\": {\n                  \"type\": \"uint64\",\n                  \"id\": 17\n                },\n                \"streamRpcRate\": {\n                  \"type\": \"float\",\n                  \"id\": 18\n                },\n                \"timePerStreamUpdate\": {\n                  \"type\": \"float\",\n                  \"id\": 19\n                }\n              }\n            },\n            \"MultiplexedRequest\": {\n              \"fields\": {\n                \"connectionRequest\": {\n                  \"type\": \"ConnectionRequest\",\n                  \"id\": 1\n                },\n                \"request\": {\n                  \"type\": \"Request\",\n                  \"id\": 2\n                }\n              }\n            },\n            \"MultiplexedResponse\": {\n              \"fields\": {\n                \"response\": {\n                  \"type\": \"Response\",\n                  \"id\": 1\n                },\n                \"streamUpdate\": {\n                  \"type\": \"StreamUpdate\",\n                  \"id\": 2\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n","import ProtoBuf from 'protobufjs';\nimport krpc from './krpc.proto.js';\n\nlet _root = null;\nconst proto = {\n    load,\n    root: function () {\n        return _root;\n    }\n};\n\nasync function load() {\n    _root = ProtoBuf.Root.fromJSON(krpc).lookup('krpc').nested.schema;\n    Object.keys(_root).forEach(function (propertyName) {\n        proto[propertyName] = _root[propertyName];\n    });\n}\n\nexport default proto;\n","import proto from './proto.js';\nimport {Buffer} from 'buffer';\nimport ProtoBuf from 'protobufjs';\n\nconst decoders = {\n    return: decodeReturn,\n    double: (buffer)=>decodePrimitive('double', buffer),\n    float: (buffer)=>decodePrimitive('float', buffer),\n    sInt32: (buffer)=>decodePrimitive('sint32', buffer),\n    sInt64: (buffer)=>decodePrimitive('sint64', buffer),\n    uInt32: (buffer)=>decodePrimitive('uint32', buffer),\n    uInt64: (buffer)=>decodePrimitive('uint64', buffer),\n    bool: (buffer)=>decodePrimitive('bool', buffer),\n    string: (buffer)=>decodePrimitive('string', buffer),\n    bytes: (buffer)=>decodePrimitive('bytes', buffer),\n    class: decodeClass,\n    enum: decodeEnum,\n    tuple: decodeTuple,\n    list: decodeList,\n    set: decodeSet,\n    dictionary: decodeDictionary,\n\n    0: ()=>null,\n\n    // Values\n    1: (buffer)=>decodePrimitive('double', buffer),\n    2: (buffer)=>decodePrimitive('float', buffer),\n    3: (buffer)=>decodePrimitive('sint32', buffer),\n    4: (buffer)=>decodePrimitive('sint64', buffer),\n    5: (buffer)=>decodePrimitive('uint32', buffer),\n    6: (buffer)=>decodePrimitive('uint64', buffer),\n    7: (buffer)=>decodePrimitive('bool', buffer),\n    8: (buffer)=>decodePrimitive('string', buffer),\n    9: (buffer)=>decodePrimitive('bytes', buffer),\n\n    // Objects\n    100: decodeClass,\n    101: decodeEnum,\n\n    // Messages\n    200: decodeEvent,\n    201: (value)=>proto.ProcedureCall.decode(value),\n    202: (value)=>proto.Stream.decode(value),\n    203: (value)=>proto.Status.decode(value),\n    204: (value)=>proto.Services.decode(value),\n\n    // Collections\n    300: decodeTuple,\n    301: decodeList,\n    302: decodeSet,\n    303: decodeDictionary\n};\nexport default decoders;\n\nexport function decodeReturn(value, returnDef, Service) {\n    if (value === undefined || !returnDef) {\n        return undefined;\n    }\n\n    return decoders[returnDef.code](value, returnDef, Service);\n}\n\nfunction decodePrimitive(type, buffer) {\n    const reader = ProtoBuf.Reader.create(buffer);\n    return reader[type]();\n}\n\nfunction decodeEvent(value, returnDef, Service) {\n    value = proto.Event.decode(value);\n    return Service.getService('KRPC')._streamEvent(value.stream);\n}\n\nfunction decodeEnum(value, returnDef, Service) {\n    value = decoders.sInt32(value);\n    let enm = Service.getEnum(returnDef.service, returnDef.name);\n    return enm.values[value];\n}\n\nfunction decodeClass(value, returnDef, Service) {\n    value = decoders.uInt64(value);\n    if (value === 0) {return;}\n    let cls = Service.getClass(returnDef.service, returnDef.name);\n    let instance = cls.Instances[value];\n    if (!instance) {return new cls(value);}\n    return instance;\n}\n\nfunction decodeDictionary(value, returnDef, Service) {\n    value = proto.Dictionary.decode(value).entries;\n    let dict = {};\n    for(let e of value) {\n        let key = decoders.return(e.key, returnDef.types[0], Service);\n        dict[key] = decoders.return(e.value, returnDef.types[1], Service);\n    }\n    return dict;\n}\n\nfunction decodeList(value, returnDef, Service) {\n    value = proto.List.decode(value).items;\n    let items = value.map((e)=>{\n        return decoders.return(e, returnDef.types[0], Service);\n    });\n    return items;\n}\n\nfunction decodeSet(value, returnDef, Service) {\n    value = proto.Set.decode(value).items;\n    let items = value.map((e)=>{\n        return decoders.return(e, returnDef.types[0], Service);\n    });\n    return items;\n}\n\nfunction decodeTuple(value, returnDef, Service) {\n    value = proto.Tuple.decode(value).items;\n    let items = value.map((e, i)=>{\n        return decoders.return(e, returnDef.types[i], Service);\n    });\n    return items;\n}\n","import {Buffer} from 'buffer';\nimport proto from './proto.js';\nimport ProtoBuf from 'protobufjs';\n\nconst encoders = {\n    argument: encodeArgument,\n    double: (value)=>encodePrimitive('double', value),\n    float: (value)=>encodePrimitive('float', value),\n    sInt32: (value)=>encodePrimitive('sint32', value),\n    sInt64: (value)=>encodePrimitive('sint64', value),\n    uInt32: (value)=>encodePrimitive('uint32', value),\n    uInt64: (value)=>encodePrimitive('uint64', value),\n    bool: (value)=>encodePrimitive('bool', value),\n    string: (value)=>encodePrimitive('string', value),\n    bytes: (value)=>encodePrimitive('bytes', value),\n    class: encodeClass,\n    enum: encodeEnum,\n    tuple: encodeTuple,\n    list: encodeList,\n    set: encodeSet,\n    dictionary: encodeDictionary,\n\n    0: ()=>null,\n\n    // Values\n    1: (value)=>encodePrimitive('double', value),\n    2: (value)=>encodePrimitive('float', value),\n    3: (value)=>encodePrimitive('sint32', value),\n    4: (value)=>encodePrimitive('sint64', value),\n    5: (value)=>encodePrimitive('uint32', value),\n    6: (value)=>encodePrimitive('uint64', value),\n    7: (value)=>encodePrimitive('bool', value),\n    8: (value)=>encodePrimitive('string', value),\n    9: (value)=>encodePrimitive('bytes', value),\n\n    // Objects\n    100: encodeClass,\n    101: encodeEnum,\n\n    // Messages\n    200: (arg)=>proto.Event.encode(arg).finish(),\n    201: (arg)=>proto.ProcedureCall.encode(arg).finish(),\n    202: (arg)=>proto.Stream.encode(arg).finish(),\n    203: (arg)=>proto.Status.encode(arg).finish(),\n    204: (arg)=>proto.Services.encode(arg).finish(),\n\n    // Collections\n    300: encodeTuple,\n    301: encodeList,\n    302: encodeSet,\n    303: encodeDictionary\n};\nexport default encoders;\n\nexport function encodeArgument(arg, parameterDef, Service) {\n    if (arg === undefined) {\n        if (parameterDef.defaultValue) {\n            return Buffer.from(parameterDef.defaultValue, 'base64');\n        }\n        throw new Error('Missing argument'); // TODO elaborate\n    }\n    return encoders[parameterDef.type.code](arg, parameterDef, Service);\n}\n\nfunction encodePrimitive(type, value) {\n    return ProtoBuf.Writer.create()[type](value).finish();\n}\n\nfunction encodeEnum(arg, parameterDef, Service) {\n    let enm = Service.getEnum(parameterDef.type.service, parameterDef.type.name);\n    if (typeof arg === 'string') {\n        arg = enm.names[arg];\n    } else if (typeof arg !== 'number') {\n        throw new Error(\"Enum value '\" + arg + \"' not of any compatible type\");\n    }\n    if (typeof arg === 'undefined') {\n        throw new Error(\"Unable to encode enum, no value found\");\n    }\n    return encoders.sInt32(arg);\n}\n\nfunction encodeClass(arg) {\n    return encoders.uInt64(arg.id);\n}\n\nfunction encodeDictionary(arg, parameterDef, Service) {\n    let entries = [];\n    for(let i in arg) {\n        let key = encoders.argument(i, {type: parameterDef.type.types[0]}, Service);\n        let value = encoders.argument(arg[i], {type: parameterDef.type.types[1]}, Service);\n        entries.push({key, value});\n    }\n    entries = entries.map((e)=>proto.DictionaryEntry.create(e));\n    return proto.Dictionary.encode({entries});\n}\n\nfunction encodeList(arg, parameterDef, Service) {\n    let items = arg.map((e)=>{\n        return encoders.argument(e, {type: parameterDef.type.types[0]}, Service);\n    });\n    return proto.List.encode({items});\n}\n\nfunction encodeSet(arg, parameterDef, Service) {\n    let items = arg.map((e)=>{\n        return encoders.argument(e, {type: parameterDef.type.types[0]}, Service);\n    });\n    return proto.Set.encode({items});\n}\n\nfunction encodeTuple(arg, parameterDef, Service) {\n    let items = parameterDef.type.types.map((e,i)=>{\n        return encoders.argument(arg[i], {type: e}, Service);\n    });\n    return proto.Tuple.encode({items});\n}\n","import proto from './proto.js';\nimport { decodeReturn } from './decoders.js';\nimport { encodeArgument } from './encoders.js';\nimport { camelCase } from 'lodash-es';\n\nconst Instances = [];\n\nfunction buildProcedureCall(service, procedure, args) {\n    args = args.map((arg, i)=>{\n        return proto.Argument.create({position: i, value: arg});\n    });\n    return proto.ProcedureCall.create({service, procedure, arguments: args});\n}\n\nexport default class Service {\n    static getService(name) {\n        return Instances[name];\n    }\n    static getException(service, name) {\n        return Service.getService(service).exceptions[name];\n    }\n    static getEnum(service, name) {\n        return Service.getService(service).enums[name];\n    }\n    static getClass(service, name) {\n        return Service.getService(service).classes[name];\n    }\n    static getCall(service, name) {\n        return Service.getService(service).calls[name];\n    }\n    static getProcedure(service, name) {\n        return Service.getService(service).procedures[name];\n    }\n    constructor(serviceObj, sendCall, streamCall, streamEvent) {\n        this.name = serviceObj.name;\n        this.documentation = serviceObj.documentation;\n        this._sendCall = sendCall;\n        this._streamCall = streamCall;\n        this._streamEvent = streamEvent;\n        this._streamCache = {};\n        Instances[this.name] = this;\n        this.exceptions = {};\n        serviceObj.exceptions.forEach((exceptionObj)=>this._addException(exceptionObj));\n        this.enums = {};\n        serviceObj.enumerations.forEach((enumObj)=>this._addEnum(enumObj));\n        this.classes = {};\n        serviceObj.classes.forEach((classObj)=>this._addClass(classObj));\n        this.calls = {};\n        this.procedures = {};\n        serviceObj.procedures.forEach((procedureObj)=>this._addProcedure(procedureObj));\n\n        Object.values(this.classes).forEach((cls)=>this._addClassProperties(cls));\n        this._addServiceProperties();\n    }\n    stream(name, onChange) {\n        // create stream and update _streamCache on change. call the onChange observer as well\n        let call = this._streams[name](this);\n        return this._streamCall(call, (v)=>{\n            this._streamCache[name] = v;\n            if (typeof onChange === 'function') {\n                onChange(v);\n            }\n        }, ()=>{\n            delete this._streamCache[name];\n        });\n    }\n    _addProperties(obj, functions, getter, setter) {\n        let methodes = {};\n        functions.forEach((call)=>{\n            let name = call.split('_').pop();\n            methodes[name] = call;\n        });\n        let attributes = {};\n        getter.forEach((call)=>{\n            let name = call.split('_').pop();\n            attributes[name] = attributes[name]||{};\n            attributes[name].get = call;\n        });\n        setter.forEach((call)=>{\n            let name = call.split('_').pop();\n            attributes[name] = attributes[name]||{};\n            attributes[name].set = call;\n        });\n\n        Object.keys(methodes).forEach((name)=>{\n            let callname = methodes[name];\n            let fn = this.procedures[callname];\n            // IDEA: check how functions could be streamable\n            // obj._streams[camelCase(name)] = this.calls[callname];\n            obj[camelCase(name)] = async function(...args) {\n                if(this instanceof Service) {\n                    return fn(...args);\n                }\n                return await fn(this, ...args);\n            };\n        });\n\n        Object.keys(attributes).forEach((name)=>{\n            let {get, set} = attributes[name];\n            let handler = {};\n            if (get) {\n                let g = this.procedures[get];\n                obj._streams[camelCase(name)] = this.calls[get];\n                handler.get = function() {\n                    if(typeof this._streamCache[camelCase(name)] !== \"undefined\") {\n                        return Promise.resolve(this._streamCache[camelCase(name)]);\n                    }\n                    if(this instanceof Service) {\n                        return g();\n                    }\n                    return g(this);\n                };\n            }\n            if (set) {\n                let s = this.procedures[set];\n                handler.set = function(value) {\n                    if(this instanceof Service) {\n                        return s(value);\n                    }\n                    return s(this, value);\n                };\n            }\n\n            Object.defineProperty(obj, camelCase(name), handler);\n        });\n    }\n    _addStatics(obj, statics) {\n        let methodes = {};\n        statics.forEach((call)=>{\n            let name = call.split('_').pop();\n            methodes[name] = call;\n        });\n\n        Object.keys(methodes).forEach((name)=>{\n            let callname = methodes[name];\n            let fn = this.procedures[callname];\n            // IDEA: check how statics could be streamable\n            // obj._streams[name] = this.calls[callname];\n            obj[name] = function(...args) {\n                if(this instanceof Service) {\n                    return fn(...args);\n                }\n                return fn(...args);\n            };\n        });\n    }\n\n    _addClass(classObj) {\n        let _streamCall = this._streamCall;\n        this.classes[classObj.name] = class Class {\n            constructor(id) {\n                if (Class.Instances[id]) {return Class.Instances[id];}\n                Class.Instances[id] = this;\n\n                this.id = id;\n                // this.uid = Math.random().toFixed(10).slice(2);\n                this.className = Class.Name;\n                this.classDocumentation = Class.Documentation;\n                this._streamCache = {};\n            }\n            stream(name, onChange) {\n                // create stream and update _streamCache on change. call the onChange observer as well\n                let call = this._streams[name](this);\n                return _streamCall(call, (v)=>{\n                    this._streamCache[name] = v;\n                    if (typeof onChange === 'function') {\n                        onChange(v);\n                    }\n                }, ()=>{\n                    delete this._streamCache[name];\n                });\n            }\n        };\n        this.classes[classObj.name].Name = classObj.name;\n        this.classes[classObj.name].Documentation = classObj.documentation;\n        this.classes[classObj.name].Instances = [];\n        this[classObj.name] = this.classes[classObj.name];\n    }\n    _addClassProperties(cls) {\n        let functions = Object.keys(this.procedures).filter((call)=>call.indexOf(cls.Name) === 0 && call.indexOf('_get_') === -1 && call.indexOf('_set_') === -1 && call.indexOf('_static_') === -1);\n        let getter = Object.keys(this.procedures).filter((call)=>call.indexOf(cls.Name+'_get_') === 0);\n        let setter = Object.keys(this.procedures).filter((call)=>call.indexOf(cls.Name+'_set_') === 0);\n        let statics = Object.keys(this.procedures).filter((call)=>call.indexOf(cls.Name+'_static_') === 0);\n\n        cls.prototype._streams = {};\n        this._addProperties(cls.prototype, functions, getter, setter);\n        this._addStatics(cls, statics);\n    }\n    _addServiceProperties() {\n        let functions = Object.keys(this.procedures).filter((call)=>call.indexOf('_') === -1);\n        let getter = Object.keys(this.procedures).filter((call)=>call.indexOf('get_') === 0);\n        let setter = Object.keys(this.procedures).filter((call)=>call.indexOf('set_') === 0);\n\n        this._streams = {};\n        this._addProperties(this, functions, getter, setter);\n    }\n    _addEnum(enumObj) {\n        let names = {};\n        let values = {};\n        let enm = {};\n        let documentations = {};\n        enumObj.values.forEach((value, i)=>{\n            if(typeof value.value !== 'undefined') {\n                names[value.name] = value.value;\n                values[value.value] = value.name;\n                enm[value.name] = value.value;\n            } else {\n                names[value.name] = i;\n                values[i] = value.name;\n                enm[value.name] = i;\n            }\n            documentations[value.name] = value.documentation;\n        });\n        enm.names = names;\n        enm.values = values;\n        enm.documentations = documentations;\n\n        enm.name = enumObj.name;\n        enm.documentation = enumObj.documentation;\n\n        this.enums[enumObj.name] = enm;\n        this[enumObj.name] = enm;\n    }\n    _addException(exceptionObj) {\n        this.exceptions[exceptionObj.name] = function() {\n            this.name = exceptionObj.name;\n            this.message = exceptionObj.documentation;\n        };\n        this.exceptions[exceptionObj.name].prototype = Error.prototype;\n        this[exceptionObj.name] = this.exceptions[exceptionObj.name];\n    }\n    _addProcedure(procedureObj) {\n        this.calls[procedureObj.name] = (...args)=>{\n            // console.log('Arguments:',args);\n            let encodedArguments = [];\n            procedureObj.parameters.forEach((param, i)=>{\n                encodedArguments[i] = encodeArgument(args[i], param, Service);\n            });\n            // console.log('encodedArguments:',encodedArguments);\n            return {\n                call: buildProcedureCall(this.name, procedureObj.name, encodedArguments),\n                decode: (value)=>decodeReturn(value, procedureObj.returnType, Service)\n            };\n        };\n        this.procedures[procedureObj.name] = (...args)=>{\n            return this._sendCall(this.calls[procedureObj.name](...args)).then(res=>{\n              if (res.error || res.results[0].error) {\n                  throw res.error || res.results[0].error;\n              }\n              return res.results[0].value;\n            });\n        };\n        this.procedures[procedureObj.name].documentation = procedureObj.documentation;\n    }\n}\n","import proto from './proto.js';\nimport decoders from './decoders.js';\nimport encoders from './encoders.js';\n\nfunction buildProcedureCall(service, procedure, args) {\n    args = args.map((arg, i)=>{\n        return proto.Argument.create({position: i, value: arg});\n    });\n    return proto.ProcedureCall.create({service, procedure, arguments: args});\n}\n\n/**\n * @augments KRPC\n * @description Returns the identifier for the current client.\n * @result {bytes}\n * @returns {{call :Object, decode: function}}\n */\nexport function getClientId() {\n    let encodedArguments = [];\n    return {\n        call: buildProcedureCall('KRPC', 'GetClientID', encodedArguments),\n        decode: (value)=>decoders.bytes(value)\n    };\n};\n\n/**\n * @augments KRPC\n * @description Returns some information about the server, such as the version.\n * @result {Object}\n * @returns {{call :Object, decode: function}}\n */\nexport function getStatus() {\n    let encodedArguments = [];\n    return {\n        call: buildProcedureCall('KRPC', 'GetStatus', encodedArguments),\n        decode: (value)=>proto.Status.decode(value)\n    };\n};\n\n/**\n * @augments KRPC\n * @description Returns information on all services, procedures, classes, properties etc. provided by the server.\n * Can be used by client libraries to automatically create functionality such as stubs.\n * @result {Object}\n * @returns {{call :Object, decode: function}}\n */\nexport function getServices() {\n    let encodedArguments = [];\n    return {\n        call: buildProcedureCall('KRPC', 'GetServices', encodedArguments),\n        decode: (value)=>proto.Services.decode(value)\n    };\n};\n\n/**\n * @augments KRPC\n * @description Add a streaming request and return its identifier.\n * @param {Object} call\n * @result {Object}\n * @returns {{call :Object, decode: function}}\n */\nexport function addStream(call) {\n    let encodedArguments = [\n        {buffer: proto.ProcedureCall.encode(call).finish()}\n    ];\n    return {\n        call: buildProcedureCall('KRPC', 'AddStream', encodedArguments),\n        decode: (value)=>proto.Stream.decode(value)\n    };\n};\n\n/**\n * @augments KRPC\n * @description Remove a streaming request.\n * @param {number} id\n * @result {void}\n * @returns {void}\n */\nexport function setStreamRate(id, rate) {\n    let encodedArguments = [\n        encoders.uInt64(id),\n        encoders.float(rate)\n    ];\n    return {\n        call: buildProcedureCall('KRPC', 'SetStreamRate', encodedArguments),\n        decode: null\n    };\n};\n\n/**\n * @augments KRPC\n * @description Remove a streaming request.\n * @param {number} id\n * @result {void}\n * @returns {void}\n */\nexport function removeStream(id) {\n    let encodedArguments = [\n        encoders.uInt64(id)\n    ];\n    return {\n        call: buildProcedureCall('KRPC', 'RemoveStream', encodedArguments),\n        decode: null\n    };\n};\n\n/**\n * @augments KRPC\n * @description A list of RPC clients that are currently connected to the server.\n * Each entry in the list is a clients identifier, name and address.\n * @result {{bytes, string, string}[]}\n * @returns {{call :Object, decode: function}}\n */\nexport function getClients() {\n    let encodedArguments = [];\n    return {\n        call: buildProcedureCall('KRPC', 'get_Clients', encodedArguments),\n        decode: (value)=>{\n            let list = proto.List.decode(value).items;\n            let items = list.map((tuple)=>{\n                tuple = proto.Tuple.decode(tuple).items;\n                tuple[0] = decoders.bytes(tuple[0]);\n                tuple[1] = decoders.string(tuple[1]);\n                tuple[2] = decoders.string(tuple[2]);\n                return tuple;\n            });\n            return items;\n        }\n    };\n};\n\n/**\n * @augments KRPC\n * @description Get the current game scene.\n * @result {Long} A long value representing the id for the KRPC.GameScene\n * @returns {{call :Object, decode: function}}\n */\nexport function getCurrentGameScene() {\n    let encodedArguments = [];\n    return {\n        call: buildProcedureCall('KRPC', 'get_CurrentGameScene', encodedArguments),\n        decode: (value)=>{\n            let values = {\n                0: 'SpaceCenter',\n                1: 'Flight',\n                2: 'TrackingStation',\n                3: 'EditorVAB',\n                4: 'EditorSPH'\n            };\n            value = decoders.sInt32(value);\n            return values[value];\n        }\n    };\n};\n","import WebSocket from 'ws';\nimport { camelCase } from 'lodash-es';\nimport proto from './proto.js';\nimport {Buffer} from 'buffer';\nimport Service from './Service.js';\nimport * as kRPCService from './krpc-service-legacy.js';\n\nconst defaultOptions = {\n    name: 'krpc.js',\n    host: '127.0.0.1',\n    rpcPort: 50000,\n    streamPort: 50001,\n    streamRate: 0,\n    wsOptions: {},\n    wsProtocols: [],\n    closeOnConnectionError: true,\n};\n\nexport default class KRPC {\n    constructor(options) {\n        this.options = { ...defaultOptions, ...options };\n\n        this.callbackStack = [];\n        this.decodeStack = [];\n        this.rpcSocket = null;\n        this.streamSocket = null;\n        this.services = { krpcLegacy: kRPCService };\n        this.streams = {};\n    }\n\n    async load() {\n        await proto.load();\n        await this.connectToRPCServer();\n        await this.connectToStreamServer();\n        await this.createServices();\n        return this;\n    }\n\n    close() {\n        this.rpcSocket.close();\n        if (this.streamSocket) this.streamSocket.close();\n        while (this.callbackStack.length) {\n            this.callbackStack.pop().reject('Connection closed.');\n        }\n        this.decodeStack = [];\n        this.streams = {};\n    }\n\n    connectToRPCServer() {\n        return new Promise((resolve, reject)=>{\n            const url = 'ws://' + this.options.host + ':' + this.options.rpcPort.toString()+ '?name=' + this.options.name;\n            this.rpcSocket = new WebSocket(url, this.options.wsProtocols, this.options.wsOptions);\n            this.rpcSocket.binaryType = 'arraybuffer';\n            this.rpcSocket.addEventListener('error', (event)=>{\n                reject(event.error);\n                console.error('Received rpcSocket error event:', event);\n                if (this.options.failOnConnectionError) this.close();\n            });\n            this.rpcSocket.addEventListener('close', (event)=>{\n                const message = `RPC connection close: ${event.code} ${event.reason}`;\n                reject(new Error(message));\n                this.close();\n                console.error(message);\n            });\n            this.rpcSocket.addEventListener('message', (event)=>{\n                try {\n                    this.onMessage(event.data);\n                } catch (e) {\n                    this.onMessageError(e);\n                    reject(e);\n                    //console.error('Unexpected exception processing RPC-Message:', e);\n                }\n            });\n            this.rpcSocket.addEventListener('open', async ()=>{\n                const response = await this.send(kRPCService.getClientId());\n                this.clientId = response.results[0].value.toString('base64');\n                resolve(this.clientId);\n            }, {once: true});\n        });\n    }\n\n    connectToStreamServer() {\n        return new Promise((resolve, reject)=>{\n            const url = 'ws://' + this.options.host + ':' + this.options.streamPort.toString()+ '?id=' + this.clientId;\n            this.streamSocket = new WebSocket(url, this.options.wsProtocols, this.options.wsOptions);\n            this.streamSocket.binaryType = 'arraybuffer';\n            this.streamSocket.addEventListener('error', (event)=>{\n                reject(event.error);\n                console.error('Received streamSocket error event:', event);\n                if (this.options.failOnConnectionError) this.close();\n            });\n            this.streamSocket.addEventListener('close', (event)=>console.warn('Stream connection close:', event));\n            this.streamSocket.addEventListener('message', (event)=>{\n                try {\n                    this.onStreamMessage(event.data);\n                } catch (e) {\n                    //this.onStreamError(e);\n                    reject();\n                    console.error('Unexpected exception processing Stream-Message:', e);\n                }\n            });\n            this.streamSocket.addEventListener('open', resolve, {once: true});\n        });\n    }\n\n    async createServices() {\n        const response = await this.send(kRPCService.getServices());\n        const services = response.results[0].value.services.map((service)=>\n            new Service(\n                service,\n                (call)=>this.send(call),\n                (call, update, remove)=>this.addStream(call, update, remove),\n                (stream)=>this.addEvent(stream)\n            )\n        );\n\n        services.forEach((service)=>{\n            this.services[camelCase(service.name)] = service;\n        });\n    }\n\n    decodeMessage(buffer, decoder) {\n        buffer = Buffer.from(buffer);\n\n        try {\n            return decoder.decode(buffer);\n        }\n        catch (error) {\n            let problem;\n            try {\n                problem = proto.Error.decode(buffer);\n            }\n            catch (errorError) {\n                try {\n                    problem = buffer.toString('utf-8');\n                }\n                catch (parsingError) {\n                    problem = \"Error parsing binary data :\" + parsingError.message;\n                    problem = error.message + '\\n' + problem + '\\n' + error.decoded;\n                }\n            }\n            console.error(error, problem);\n            return this.onMessageError(problem);\n        }\n    }\n\n    onMessage(data) {\n        const response = this.decodeMessage(data, proto.Response);\n        if(!response) {return;}\n\n        if(response.error) {\n            return this.onMessageError(response.error);\n        }\n\n        response.results.forEach((result)=>{\n            const decode = this.decodeStack.pop();\n            if (decode === undefined) {\n                throw new Error('Decode stack misalignment!');\n            } else if (!result.error && typeof decode === 'function') {\n                result.value = decode(Buffer.from(result.value));\n            }\n        });\n        //this.rpc.emitter.emit('message', response, data);\n        if (this.callbackStack.length > 0) {\n            const promise = this.callbackStack.pop();\n            return promise.resolve(response);\n        }\n    }\n    onMessageError(err) {\n        //this.rpc.emitter.emit('error', err);\n        console.error('Message Error', err);\n        this.decodeStack.pop();\n\n        if (this.callbackStack.length > 0) {\n            const promise = this.callbackStack.pop();\n            return promise.reject(err);\n        }\n    }\n\n    onStreamMessage(data) {\n        const streamUpdate = this.decodeMessage(data, proto.StreamUpdate);\n        if(!streamUpdate) {return;}\n\n        if (Object.keys(this.streams).length === 0) {\n            return; //this.stream.emitter.emit('message', streamUpdate, data);\n        }\n        streamUpdate.results.forEach((update)=>{\n            if (update.result.error) {\n                // this.stream.emitter.emit('error', update.result.error);\n                return;\n            }\n            const stream = this.streams[update.id.toString()];\n            if (!stream) {\n                console.error('Received invalid stream id', update.id);\n                return;\n            }\n\n            const decodedValue = stream.decode(update.result.value);\n            stream.callbacks.forEach((f)=>{\n                try {\n                    f(decodedValue);\n                } catch(e) {\n                    console.error(e);\n                }\n            });\n        });\n        // return this.stream.emitter.emit('message', streamUpdate, data);\n    }\n\n    async send(calls) { // IDEA: collect calls till next tick (setTimeout(..., 0)), then batch send them\n        return await this.sendRequest(calls);\n    }\n\n    sendRequest(calls) {\n        if (!calls) {\n            throw new Error(\"The calls argument must be provided when calling sendRequest\");\n        }\n        if (typeof calls !== 'object') {\n            throw new Error(\"The calls argument must either be an object or an array of objects when calling sendRequest\");\n        }\n        if (!(calls instanceof Array)) {\n            calls = [calls];\n        }\n\n        const procedureCalls = [];\n        calls.forEach((call)=>{\n            if (typeof call.call === 'undefined') {\n                throw new Error(\"Each call added must have both a call and decode property, missing call\");\n            }\n            if (typeof call.decode === 'undefined') {\n                throw new Error(\"Each call added must have both a call and decode property, missing decode\");\n            }\n            this.decodeStack.splice(0, 0, call.decode);\n            procedureCalls.push(call.call);\n        });\n        const req = proto.Request.create({calls: procedureCalls});\n        const buffer = proto.Request.encode(req).finish();\n        const callbacks = {\n          resolve: ()=>console.error('Callbacks not ready!'),\n          reject: ()=>console.error('Callbacks not ready!'),\n        };\n        this.callbackStack.splice(0, 0, callbacks);\n\n        this.rpcSocket.send(buffer);\n        return new Promise((resolve, reject)=>{\n          callbacks.resolve = resolve;\n          callbacks.reject = reject;\n        });\n    }\n\n    async addStream(procedure, onUpdate, onDelete) {\n        if (procedure instanceof Array) {\n            throw new Error(\"You can only pass one procedure call to `client.addStream` at a time.\");\n        }\n        if (!procedure.call) {\n            throw new Error(\"Procedure must have a call property on it.\");\n        }\n\n        // IDEA: find existing streams by procedure TODO: because removing streams might conflict with pending stream adds\n        const stream = await this.services.krpc.addStream(procedure.call);\n\n        while (this.streams[stream.id.toString()] && this.streams[stream.id.toString()].invalid) {\n            await this.removeStream(this.streams[stream.id.toString()]);\n            stream = await this.services.krpc.addStream(procedure.call);\n        }\n\n        if (stream.error) {\n            throw stream.error;\n        }\n\n        return this.registerStream(procedure, stream, onUpdate, onDelete);\n    }\n    registerStream(procedure, stream, onUpdate, onDelete) {\n        let s = this.streams[stream.id.toString()];\n\n        if (!s || s.invalid) {\n            s = {\n                callbacks: [],\n                removeCallbacks: [],\n                decode: procedure.decode,\n                id: stream.id,\n                remove: ()=>this.removeStream(s),\n                setRate: (r)=>this.setStreamRate(s, r)\n                // IDEA: make class Stream extends EventTarget\n            };\n\n            if(this.options.streamRate !== 0) {\n                s.setRate(this.options.streamRate);\n            }\n        }\n\n        if(onUpdate) {\n            this.send(procedure).then((r)=>r.results[0].value).then(onUpdate);\n            s.callbacks.push(onUpdate);\n        }\n        if(onDelete) {\n            s.removeCallbacks.push(onDelete);\n        }\n        this.streams[stream.id.toString()] = s;\n        const si = {\n            call: procedure.call,\n            stream: s,\n            handler: onUpdate,\n            remove: ()=>{\n                si.invalid = true;\n                si.stream.callbacks = si.stream.callbacks.filter((i)=>i!==si.handler);\n                if (!si.stream.callbacks.length) {si.stream.remove();}\n            }\n        };\n        return si;\n    }\n    async addEvent(stream) {\n        let s = this.streams[stream.id.toString()];\n\n        if (!s || s.invalid) {\n            s = {\n                callbacks: [],\n                removeCallbacks: [],\n                decode: ()=>undefined,\n                id: stream.id,\n                remove: ()=>this.removeStream(s),\n                setRate: (r)=>this.setStreamRate(s, r)\n                // IDEA: make class Stream extends EventTarget\n            };\n\n            if(this.options.streamRate !== 0) {\n                s.setRate(this.options.streamRate);\n            }\n        }\n\n        const handlers = [];\n        const handler = ()=>{\n            for (const h of handlers) {\n                try {\n                    h();\n                } catch(e) {\n                    console.error(e);\n                }\n            }\n        }\n        s.callbacks.push(handler);\n\n        this.streams[stream.id.toString()] = s;\n\n        const si = {\n            started: false,\n            stream: s,\n            handlers: handlers,\n            listen: async (cb)=>{\n                if (typeof cb === 'function') si.handlers.push(cb);\n                return this.services.krpc.startStream(stream.id).then(()=>{si.started = true;});\n            },\n            remove: ()=>{\n                si.invalid = true;\n                si.stream.callbacks = si.stream.callbacks.filter((i)=>i!==handler);\n                if (!si.stream.callbacks.length) {si.stream.remove();}\n            }\n        };\n        return si;\n    }\n    async setStreamRate(stream, rate) {\n        const setRate = kRPCService.setStreamRate(stream.id, rate);\n\n        const response = await this.send(setRate);\n\n        if (response.error) {\n            throw new Error(response.error);\n        }\n        const firstResult = response.results[0];\n        if (firstResult.error) {\n            throw new Error(firstResult.error);\n        }\n        return;\n    }\n    async removeStream(stream) {\n        stream.invalid = true;\n        stream.callbacks = [];\n        stream.removeCallbacks.forEach((f)=>{\n            try {\n                f();\n            } catch(e) {\n                console.error(e);\n            }\n        });\n        stream.removeCallbacks = [];\n\n        const removeStream = kRPCService.removeStream(stream.id);\n\n        const response = await this.send(removeStream);\n\n        if (response.error) {\n            throw new Error(response.error);\n        }\n        const firstResult = response.results[0];\n        if (firstResult.error) {\n            throw new Error(firstResult.error);\n        }\n        // IDEA: find out why deletion at this place causes streams with removed id's to be created as new\n        // maybe the server has a timing issue, where streams that were removed would be assumed valid in the same tick?\n        // delete this.streams[stream.id.toString()];\n        return;\n    }\n};\n"],"names":["nested","krpc","schema","options","csharp_namespace","java_package","java_outer_classname","objc_class_prefix","ConnectionRequest","fields","type","id","clientName","clientIdentifier","Type","values","RPC","STREAM","ConnectionResponse","status","message","Status","OK","MALFORMED_MESSAGE","TIMEOUT","WRONG_TYPE","Request","calls","rule","ProcedureCall","service","procedure","serviceId","procedureId","arguments","Argument","position","value","Response","error","results","ProcedureResult","Error","name","description","stackTrace","StreamUpdate","StreamResult","result","Services","services","Service","procedures","classes","enumerations","exceptions","documentation","Procedure","parameters","returnType","returnIsNullable","gameScenes","GameScene","SPACE_CENTER","FLIGHT","TRACKING_STATION","EDITOR_VAB","EDITOR_SPH","MISSION_BUILDER","Parameter","defaultValue","Class","Enumeration","EnumerationValue","Exception","code","types","TypeCode","NONE","DOUBLE","FLOAT","SINT32","SINT64","UINT32","UINT64","BOOL","STRING","BYTES","CLASS","ENUMERATION","EVENT","PROCEDURE_CALL","STATUS","SERVICES","TUPLE","LIST","SET","DICTIONARY","Tuple","items","List","Set","Dictionary","entries","DictionaryEntry","key","Stream","Event","stream","version","bytesRead","bytesWritten","bytesReadRate","bytesWrittenRate","rpcsExecuted","rpcRate","oneRpcPerUpdate","maxTimePerUpdate","adaptiveRateControl","blockingRecv","recvTimeout","timePerRpcUpdate","pollTimePerRpcUpdate","execTimePerRpcUpdate","streamRpcs","streamRpcsExecuted","streamRpcRate","timePerStreamUpdate","MultiplexedRequest","connectionRequest","request","MultiplexedResponse","response","streamUpdate","_root","proto","load","async","ProtoBuf","Root","fromJSON","lookup","Object","keys","forEach","propertyName","root","decoders","return","decodeReturn","double","buffer","decodePrimitive","float","sInt32","sInt64","uInt32","uInt64","bool","string","bytes","class","decodeClass","enum","decodeEnum","tuple","decodeTuple","list","decodeList","set","decodeSet","dictionary","decodeDictionary","0","1","2","3","4","5","6","7","8","9","100","101","200","returnDef","decode","getService","_streamEvent","201","202","203","204","300","301","302","303","undefined","Reader","create","getEnum","cls","getClass","instance","Instances","dict","e","map","i","encoders","argument","encodeArgument","encodePrimitive","encodeClass","encodeEnum","encodeTuple","encodeList","encodeSet","encodeDictionary","arg","encode","finish","parameterDef","Buffer","from","Writer","enm","names","push","buildProcedureCall","args","[object Object]","enums","serviceObj","sendCall","streamCall","streamEvent","this","_sendCall","_streamCall","_streamCache","exceptionObj","_addException","enumObj","_addEnum","classObj","_addClass","procedureObj","_addProcedure","_addClassProperties","_addServiceProperties","onChange","call","_streams","v","obj","functions","getter","setter","methodes","split","pop","attributes","get","callname","fn","camelCase","handler","g","Promise","resolve","s","defineProperty","statics","className","Name","classDocumentation","Documentation","filter","indexOf","prototype","_addProperties","_addStatics","documentations","encodedArguments","param","then","res","getClientId","getServices","setStreamRate","rate","removeStream","defaultOptions","host","rpcPort","streamPort","streamRate","wsOptions","wsProtocols","closeOnConnectionError","callbackStack","decodeStack","rpcSocket","streamSocket","krpcLegacy","kRPCService","streams","connectToRPCServer","connectToStreamServer","createServices","close","length","reject","url","toString","WebSocket","binaryType","addEventListener","event","console","failOnConnectionError","reason","onMessage","data","onMessageError","send","kRPCService.getClientId","clientId","once","warn","onStreamMessage","kRPCService.getServices","update","remove","addStream","addEvent","decoder","problem","errorError","parsingError","decoded","decodeMessage","err","decodedValue","callbacks","f","sendRequest","Array","procedureCalls","splice","req","onUpdate","onDelete","invalid","registerStream","removeCallbacks","setRate","r","si","handlers","h","started","listen","cb","startStream","kRPCService.setStreamRate","firstResult","kRPCService.removeStream"],"mappings":"gMACA,CACEA,OAAU,CACRC,KAAQ,CACND,OAAU,CACRE,OAAU,CACRC,QAAW,CACTC,iBAAoB,mBACpBC,aAAgB,cAChBC,qBAAwB,OACxBC,kBAAqB,QAEvBP,OAAU,CACRQ,kBAAqB,CACnBC,OAAU,CACRC,KAAQ,CACNA,KAAQ,OACRC,GAAM,GAERC,WAAc,CACZF,KAAQ,SACRC,GAAM,GAERE,iBAAoB,CAClBH,KAAQ,QACRC,GAAM,IAGVX,OAAU,CACRc,KAAQ,CACNC,OAAU,CACRC,IAAO,EACPC,OAAU,MAKlBC,mBAAsB,CACpBT,OAAU,CACRU,OAAU,CACRT,KAAQ,SACRC,GAAM,GAERS,QAAW,CACTV,KAAQ,SACRC,GAAM,GAERE,iBAAoB,CAClBH,KAAQ,QACRC,GAAM,IAGVX,OAAU,CACRqB,OAAU,CACRN,OAAU,CACRO,GAAM,EACNC,kBAAqB,EACrBC,QAAW,EACXC,WAAc,MAKtBC,QAAW,CACTjB,OAAU,CACRkB,MAAS,CACPC,KAAQ,WACRlB,KAAQ,gBACRC,GAAM,KAIZkB,cAAiB,CACfpB,OAAU,CACRqB,QAAW,CACTpB,KAAQ,SACRC,GAAM,GAERoB,UAAa,CACXrB,KAAQ,SACRC,GAAM,GAERqB,UAAa,CACXtB,KAAQ,SACRC,GAAM,GAERsB,YAAe,CACbvB,KAAQ,SACRC,GAAM,GAERuB,UAAa,CACXN,KAAQ,WACRlB,KAAQ,WACRC,GAAM,KAIZwB,SAAY,CACV1B,OAAU,CACR2B,SAAY,CACV1B,KAAQ,SACRC,GAAM,GAER0B,MAAS,CACP3B,KAAQ,QACRC,GAAM,KAIZ2B,SAAY,CACV7B,OAAU,CACR8B,MAAS,CACP7B,KAAQ,QACRC,GAAM,GAER6B,QAAW,CACTZ,KAAQ,WACRlB,KAAQ,kBACRC,GAAM,KAIZ8B,gBAAmB,CACjBhC,OAAU,CACR8B,MAAS,CACP7B,KAAQ,QACRC,GAAM,GAER0B,MAAS,CACP3B,KAAQ,QACRC,GAAM,KAIZ+B,MAAS,CACPjC,OAAU,CACRqB,QAAW,CACTpB,KAAQ,SACRC,GAAM,GAERgC,KAAQ,CACNjC,KAAQ,SACRC,GAAM,GAERiC,YAAe,CACblC,KAAQ,SACRC,GAAM,GAERkC,WAAc,CACZnC,KAAQ,SACRC,GAAM,KAIZmC,aAAgB,CACdrC,OAAU,CACR+B,QAAW,CACTZ,KAAQ,WACRlB,KAAQ,eACRC,GAAM,KAIZoC,aAAgB,CACdtC,OAAU,CACRE,GAAM,CACJD,KAAQ,SACRC,GAAM,GAERqC,OAAU,CACRtC,KAAQ,kBACRC,GAAM,KAIZsC,SAAY,CACVxC,OAAU,CACRyC,SAAY,CACVtB,KAAQ,WACRlB,KAAQ,UACRC,GAAM,KAIZwC,QAAW,CACT1C,OAAU,CACRkC,KAAQ,CACNjC,KAAQ,SACRC,GAAM,GAERyC,WAAc,CACZxB,KAAQ,WACRlB,KAAQ,YACRC,GAAM,GAER0C,QAAW,CACTzB,KAAQ,WACRlB,KAAQ,QACRC,GAAM,GAER2C,aAAgB,CACd1B,KAAQ,WACRlB,KAAQ,cACRC,GAAM,GAER4C,WAAc,CACZ3B,KAAQ,WACRlB,KAAQ,YACRC,GAAM,GAER6C,cAAiB,CACf9C,KAAQ,SACRC,GAAM,KAIZ8C,UAAa,CACXhD,OAAU,CACRkC,KAAQ,CACNjC,KAAQ,SACRC,GAAM,GAER+C,WAAc,CACZ9B,KAAQ,WACRlB,KAAQ,YACRC,GAAM,GAERgD,WAAc,CACZjD,KAAQ,OACRC,GAAM,GAERiD,iBAAoB,CAClBlD,KAAQ,OACRC,GAAM,GAERkD,WAAc,CACZjC,KAAQ,WACRlB,KAAQ,YACRC,GAAM,GAER6C,cAAiB,CACf9C,KAAQ,SACRC,GAAM,IAGVX,OAAU,CACR8D,UAAa,CACX/C,OAAU,CACRgD,aAAgB,EAChBC,OAAU,EACVC,iBAAoB,EACpBC,WAAc,EACdC,WAAc,EACdC,gBAAmB,MAK3BC,UAAa,CACX5D,OAAU,CACRkC,KAAQ,CACNjC,KAAQ,SACRC,GAAM,GAERD,KAAQ,CACNA,KAAQ,OACRC,GAAM,GAER2D,aAAgB,CACd5D,KAAQ,QACRC,GAAM,KAIZ4D,MAAS,CACP9D,OAAU,CACRkC,KAAQ,CACNjC,KAAQ,SACRC,GAAM,GAER6C,cAAiB,CACf9C,KAAQ,SACRC,GAAM,KAIZ6D,YAAe,CACb/D,OAAU,CACRkC,KAAQ,CACNjC,KAAQ,SACRC,GAAM,GAERI,OAAU,CACRa,KAAQ,WACRlB,KAAQ,mBACRC,GAAM,GAER6C,cAAiB,CACf9C,KAAQ,SACRC,GAAM,KAIZ8D,iBAAoB,CAClBhE,OAAU,CACRkC,KAAQ,CACNjC,KAAQ,SACRC,GAAM,GAER0B,MAAS,CACP3B,KAAQ,QACRC,GAAM,GAER6C,cAAiB,CACf9C,KAAQ,SACRC,GAAM,KAIZ+D,UAAa,CACXjE,OAAU,CACRkC,KAAQ,CACNjC,KAAQ,SACRC,GAAM,GAER6C,cAAiB,CACf9C,KAAQ,SACRC,GAAM,KAIZG,KAAQ,CACNL,OAAU,CACRkE,KAAQ,CACNjE,KAAQ,WACRC,GAAM,GAERmB,QAAW,CACTpB,KAAQ,SACRC,GAAM,GAERgC,KAAQ,CACNjC,KAAQ,SACRC,GAAM,GAERiE,MAAS,CACPhD,KAAQ,WACRlB,KAAQ,OACRC,GAAM,IAGVX,OAAU,CACR6E,SAAY,CACV9D,OAAU,CACR+D,KAAQ,EACRC,OAAU,EACVC,MAAS,EACTC,OAAU,EACVC,OAAU,EACVC,OAAU,EACVC,OAAU,EACVC,KAAQ,EACRC,OAAU,EACVC,MAAS,EACTC,MAAS,IACTC,YAAe,IACfC,MAAS,IACTC,eAAkB,IAClB1E,OAAU,IACV2E,OAAU,IACVC,SAAY,IACZC,MAAS,IACTC,KAAQ,IACRC,IAAO,IACPC,WAAc,QAKtBC,MAAS,CACPzF,OAAU,CACR0F,MAAS,CACPvE,KAAQ,WACRlB,KAAQ,QACRC,GAAM,KAIZyF,KAAQ,CACN3F,OAAU,CACR0F,MAAS,CACPvE,KAAQ,WACRlB,KAAQ,QACRC,GAAM,KAIZ0F,IAAO,CACL5F,OAAU,CACR0F,MAAS,CACPvE,KAAQ,WACRlB,KAAQ,QACRC,GAAM,KAIZ2F,WAAc,CACZ7F,OAAU,CACR8F,QAAW,CACT3E,KAAQ,WACRlB,KAAQ,kBACRC,GAAM,KAIZ6F,gBAAmB,CACjB/F,OAAU,CACRgG,IAAO,CACL/F,KAAQ,QACRC,GAAM,GAER0B,MAAS,CACP3B,KAAQ,QACRC,GAAM,KAIZ+F,OAAU,CACRjG,OAAU,CACRE,GAAM,CACJD,KAAQ,SACRC,GAAM,KAIZgG,MAAS,CACPlG,OAAU,CACRmG,OAAU,CACRlG,KAAQ,SACRC,GAAM,KAIZU,OAAU,CACRZ,OAAU,CACRoG,QAAW,CACTnG,KAAQ,SACRC,GAAM,GAERmG,UAAa,CACXpG,KAAQ,SACRC,GAAM,GAERoG,aAAgB,CACdrG,KAAQ,SACRC,GAAM,GAERqG,cAAiB,CACftG,KAAQ,QACRC,GAAM,GAERsG,iBAAoB,CAClBvG,KAAQ,QACRC,GAAM,GAERuG,aAAgB,CACdxG,KAAQ,SACRC,GAAM,GAERwG,QAAW,CACTzG,KAAQ,QACRC,GAAM,GAERyG,gBAAmB,CACjB1G,KAAQ,OACRC,GAAM,GAER0G,iBAAoB,CAClB3G,KAAQ,SACRC,GAAM,GAER2G,oBAAuB,CACrB5G,KAAQ,OACRC,GAAM,IAER4G,aAAgB,CACd7G,KAAQ,OACRC,GAAM,IAER6G,YAAe,CACb9G,KAAQ,SACRC,GAAM,IAER8G,iBAAoB,CAClB/G,KAAQ,QACRC,GAAM,IAER+G,qBAAwB,CACtBhH,KAAQ,QACRC,GAAM,IAERgH,qBAAwB,CACtBjH,KAAQ,QACRC,GAAM,IAERiH,WAAc,CACZlH,KAAQ,SACRC,GAAM,IAERkH,mBAAsB,CACpBnH,KAAQ,SACRC,GAAM,IAERmH,cAAiB,CACfpH,KAAQ,QACRC,GAAM,IAERoH,oBAAuB,CACrBrH,KAAQ,QACRC,GAAM,MAIZqH,mBAAsB,CACpBvH,OAAU,CACRwH,kBAAqB,CACnBvH,KAAQ,oBACRC,GAAM,GAERuH,QAAW,CACTxH,KAAQ,UACRC,GAAM,KAIZwH,oBAAuB,CACrB1H,OAAU,CACR2H,SAAY,CACV1H,KAAQ,WACRC,GAAM,GAER0H,aAAgB,CACd3H,KAAQ,eACRC,GAAM,WC5hBxB,IAAI2H,EAAQ,KACZ,MAAMC,EAAQ,CACVC,KAMJC,iBACIH,EAAQI,UAASC,KAAKC,SAAS3I,GAAM4I,OAAO,QAAQ7I,OAAOE,OAC3D4I,OAAOC,KAAKT,GAAOU,SAAQ,SAAUC,GACjCV,EAAMU,GAAgBX,EAAMW,OARhCC,KAAM,WACF,OAAOZ,ICHf,MAAMa,EAAW,CACbC,OAAQC,EACRC,OAASC,GAASC,EAAgB,SAAUD,GAC5CE,MAAQF,GAASC,EAAgB,QAASD,GAC1CG,OAASH,GAASC,EAAgB,SAAUD,GAC5CI,OAASJ,GAASC,EAAgB,SAAUD,GAC5CK,OAASL,GAASC,EAAgB,SAAUD,GAC5CM,OAASN,GAASC,EAAgB,SAAUD,GAC5CO,KAAOP,GAASC,EAAgB,OAAQD,GACxCQ,OAASR,GAASC,EAAgB,SAAUD,GAC5CS,MAAQT,GAASC,EAAgB,QAASD,GAC1CU,MAAOC,EACPC,KAAMC,EACNC,MAAOC,EACPC,KAAMC,EACNC,IAAKC,EACLC,WAAYC,EAEZC,EAAG,IAAI,KAGPC,EAAIvB,GAASC,EAAgB,SAAUD,GACvCwB,EAAIxB,GAASC,EAAgB,QAASD,GACtCyB,EAAIzB,GAASC,EAAgB,SAAUD,GACvC0B,EAAI1B,GAASC,EAAgB,SAAUD,GACvC2B,EAAI3B,GAASC,EAAgB,SAAUD,GACvC4B,EAAI5B,GAASC,EAAgB,SAAUD,GACvC6B,EAAI7B,GAASC,EAAgB,OAAQD,GACrC8B,EAAI9B,GAASC,EAAgB,SAAUD,GACvC+B,EAAI/B,GAASC,EAAgB,QAASD,GAGtCgC,IAAKrB,EACLsB,IAAKpB,EAGLqB,IA2BJ,SAAqBpJ,EAAOqJ,EAAWvI,GAEnC,OADAd,EAAQkG,EAAM5B,MAAMgF,OAAOtJ,GACpBc,EAAQyI,WAAW,QAAQC,aAAaxJ,EAAMuE,SA5BrDkF,IAAMzJ,GAAQkG,EAAM1G,cAAc8J,OAAOtJ,GACzC0J,IAAM1J,GAAQkG,EAAM7B,OAAOiF,OAAOtJ,GAClC2J,IAAM3J,GAAQkG,EAAMlH,OAAOsK,OAAOtJ,GAClC4J,IAAM5J,GAAQkG,EAAMtF,SAAS0I,OAAOtJ,GAGpC6J,IAAK5B,EACL6B,IAAK3B,EACL4B,IAAK1B,EACL2B,IAAKzB,GAIF,SAASvB,EAAahH,EAAOqJ,EAAWvI,GAC3C,QAAcmJ,IAAVjK,GAAwBqJ,EAI5B,OAAOvC,EAASuC,EAAU/G,MAAMtC,EAAOqJ,EAAWvI,GAGtD,SAASqG,EAAgB9I,EAAM6I,GAE3B,OADeb,UAAS6D,OAAOC,OAAOjD,GACxB7I,KAQlB,SAAS0J,EAAW/H,EAAOqJ,EAAWvI,GAGlC,OAFAd,EAAQ8G,EAASO,OAAOrH,GACdc,EAAQsJ,QAAQf,EAAU5J,QAAS4J,EAAU/I,MAC5C5B,OAAOsB,GAGtB,SAAS6H,EAAY7H,EAAOqJ,EAAWvI,GAEnC,GAAc,KADdd,EAAQ8G,EAASU,OAAOxH,IACN,OAClB,IAAIqK,EAAMvJ,EAAQwJ,SAASjB,EAAU5J,QAAS4J,EAAU/I,MACpDiK,EAAWF,EAAIG,UAAUxK,GAC7B,OAAKuK,GAAkB,IAAIF,EAAIrK,GAInC,SAASuI,EAAiBvI,EAAOqJ,EAAWvI,GACxCd,EAAQkG,EAAMjC,WAAWqF,OAAOtJ,GAAOkE,QACvC,IAAIuG,EAAO,GACX,IAAI,IAAIC,KAAK1K,EAAO,CAEhByK,EADU3D,EAASC,OAAO2D,EAAEtG,IAAKiF,EAAU9G,MAAM,GAAIzB,IACzCgG,EAASC,OAAO2D,EAAE1K,MAAOqJ,EAAU9G,MAAM,GAAIzB,GAE7D,OAAO2J,EAGX,SAAStC,EAAWnI,EAAOqJ,EAAWvI,GAKlC,OAJAd,EAAQkG,EAAMnC,KAAKuF,OAAOtJ,GAAO8D,OACf6G,KAAKD,GACZ5D,EAASC,OAAO2D,EAAGrB,EAAU9G,MAAM,GAAIzB,KAKtD,SAASuH,EAAUrI,EAAOqJ,EAAWvI,GAKjC,OAJAd,EAAQkG,EAAMlC,IAAIsF,OAAOtJ,GAAO8D,OACd6G,KAAKD,GACZ5D,EAASC,OAAO2D,EAAGrB,EAAU9G,MAAM,GAAIzB,KAKtD,SAASmH,EAAYjI,EAAOqJ,EAAWvI,GAKnC,OAJAd,EAAQkG,EAAMrC,MAAMyF,OAAOtJ,GAAO8D,OAChB6G,KAAI,CAACD,EAAGE,IACf9D,EAASC,OAAO2D,EAAGrB,EAAU9G,MAAMqI,GAAI9J,KChHtD,MAAM+J,EAAW,CACbC,SAAUC,EACV9D,OAASjH,GAAQgL,EAAgB,SAAUhL,GAC3CoH,MAAQpH,GAAQgL,EAAgB,QAAShL,GACzCqH,OAASrH,GAAQgL,EAAgB,SAAUhL,GAC3CsH,OAAStH,GAAQgL,EAAgB,SAAUhL,GAC3CuH,OAASvH,GAAQgL,EAAgB,SAAUhL,GAC3CwH,OAASxH,GAAQgL,EAAgB,SAAUhL,GAC3CyH,KAAOzH,GAAQgL,EAAgB,OAAQhL,GACvC0H,OAAS1H,GAAQgL,EAAgB,SAAUhL,GAC3C2H,MAAQ3H,GAAQgL,EAAgB,QAAShL,GACzC4H,MAAOqD,EACPnD,KAAMoD,EACNlD,MAAOmD,EACPjD,KAAMkD,EACNhD,IAAKiD,EACL/C,WAAYgD,EAEZ9C,EAAG,IAAI,KAGPC,EAAIzI,GAAQgL,EAAgB,SAAUhL,GACtC0I,EAAI1I,GAAQgL,EAAgB,QAAShL,GACrC2I,EAAI3I,GAAQgL,EAAgB,SAAUhL,GACtC4I,EAAI5I,GAAQgL,EAAgB,SAAUhL,GACtC6I,EAAI7I,GAAQgL,EAAgB,SAAUhL,GACtC8I,EAAI9I,GAAQgL,EAAgB,SAAUhL,GACtC+I,EAAI/I,GAAQgL,EAAgB,OAAQhL,GACpCgJ,EAAIhJ,GAAQgL,EAAgB,SAAUhL,GACtCiJ,EAAIjJ,GAAQgL,EAAgB,QAAShL,GAGrCkJ,IAAK+B,EACL9B,IAAK+B,EAGL9B,IAAMmC,GAAMrF,EAAM5B,MAAMkH,OAAOD,GAAKE,SACpChC,IAAM8B,GAAMrF,EAAM1G,cAAcgM,OAAOD,GAAKE,SAC5C/B,IAAM6B,GAAMrF,EAAM7B,OAAOmH,OAAOD,GAAKE,SACrC9B,IAAM4B,GAAMrF,EAAMlH,OAAOwM,OAAOD,GAAKE,SACrC7B,IAAM2B,GAAMrF,EAAMtF,SAAS4K,OAAOD,GAAKE,SAGvC5B,IAAKsB,EACLrB,IAAKsB,EACLrB,IAAKsB,EACLrB,IAAKsB,GAIF,SAASP,EAAeQ,EAAKG,EAAc5K,GAC9C,QAAYmJ,IAARsB,EAAmB,CACnB,GAAIG,EAAazJ,aACb,OAAO0J,SAAOC,KAAKF,EAAazJ,aAAc,UAElD,MAAM,IAAI5B,MAAM,oBAEpB,OAAOwK,EAASa,EAAarN,KAAKiE,MAAMiJ,EAAKG,EAAc5K,GAG/D,SAASkK,EAAgB3M,EAAM2B,GAC3B,OAAOqG,UAASwF,OAAO1B,SAAS9L,GAAM2B,GAAOyL,SAGjD,SAASP,EAAWK,EAAKG,EAAc5K,GACnC,IAAIgL,EAAMhL,EAAQsJ,QAAQsB,EAAarN,KAAKoB,QAASiM,EAAarN,KAAKiC,MACvE,GAAmB,iBAARiL,EACPA,EAAMO,EAAIC,MAAMR,QACb,GAAmB,iBAARA,EACd,MAAM,IAAIlL,MAAM,eAAiBkL,EAAM,gCAE3C,QAAmB,IAARA,EACP,MAAM,IAAIlL,MAAM,yCAEpB,OAAOwK,EAASxD,OAAOkE,GAG3B,SAASN,EAAYM,GACjB,OAAOV,EAASrD,OAAO+D,EAAIjN,IAG/B,SAASgN,EAAiBC,EAAKG,EAAc5K,GACzC,IAAIoD,EAAU,GACd,IAAI,IAAI0G,KAAKW,EAAK,CACd,IAAInH,EAAMyG,EAASC,SAASF,EAAG,CAACvM,KAAMqN,EAAarN,KAAKkE,MAAM,IAAKzB,GAC/Dd,EAAQ6K,EAASC,SAASS,EAAIX,GAAI,CAACvM,KAAMqN,EAAarN,KAAKkE,MAAM,IAAKzB,GAC1EoD,EAAQ8H,KAAK,CAAC5H,IAAAA,EAAKpE,MAAAA,IAGvB,OADAkE,EAAUA,EAAQyG,KAAKD,GAAIxE,EAAM/B,gBAAgBgG,OAAOO,KACjDxE,EAAMjC,WAAWuH,OAAO,CAACtH,QAAAA,IAGpC,SAASkH,EAAWG,EAAKG,EAAc5K,GACnC,IAAIgD,EAAQyH,EAAIZ,KAAKD,GACVG,EAASC,SAASJ,EAAG,CAACrM,KAAMqN,EAAarN,KAAKkE,MAAM,IAAKzB,KAEpE,OAAOoF,EAAMnC,KAAKyH,OAAO,CAAC1H,MAAAA,IAG9B,SAASuH,EAAUE,EAAKG,EAAc5K,GAClC,IAAIgD,EAAQyH,EAAIZ,KAAKD,GACVG,EAASC,SAASJ,EAAG,CAACrM,KAAMqN,EAAarN,KAAKkE,MAAM,IAAKzB,KAEpE,OAAOoF,EAAMlC,IAAIwH,OAAO,CAAC1H,MAAAA,IAG7B,SAASqH,EAAYI,EAAKG,EAAc5K,GACpC,IAAIgD,EAAQ4H,EAAarN,KAAKkE,MAAMoI,KAAI,CAACD,EAAEE,IAChCC,EAASC,SAASS,EAAIX,GAAI,CAACvM,KAAMqM,GAAI5J,KAEhD,OAAOoF,EAAMrC,MAAM2H,OAAO,CAAC1H,MAAAA,IC7G/B,MAAM0G,EAAY,GAElB,SAASyB,EAAmBxM,EAASC,EAAWwM,GAI5C,OAHAA,EAAOA,EAAKvB,KAAI,CAACY,EAAKX,IACX1E,EAAMpG,SAASqK,OAAO,CAACpK,SAAU6K,EAAG5K,MAAOuL,MAE/CrF,EAAM1G,cAAc2K,OAAO,CAAC1K,QAAAA,EAASC,UAAAA,EAAWG,UAAWqM,IAGvD,MAAMpL,EACjBqL,kBAAkB7L,GACd,OAAOkK,EAAUlK,GAErB6L,oBAAoB1M,EAASa,GACzB,OAAOQ,EAAQyI,WAAW9J,GAASyB,WAAWZ,GAElD6L,eAAe1M,EAASa,GACpB,OAAOQ,EAAQyI,WAAW9J,GAAS2M,MAAM9L,GAE7C6L,gBAAgB1M,EAASa,GACrB,OAAOQ,EAAQyI,WAAW9J,GAASuB,QAAQV,GAE/C6L,eAAe1M,EAASa,GACpB,OAAOQ,EAAQyI,WAAW9J,GAASH,MAAMgB,GAE7C6L,oBAAoB1M,EAASa,GACzB,OAAOQ,EAAQyI,WAAW9J,GAASsB,WAAWT,GAElD6L,YAAYE,EAAYC,EAAUC,EAAYC,GAC1CC,KAAKnM,KAAO+L,EAAW/L,KACvBmM,KAAKtL,cAAgBkL,EAAWlL,cAChCsL,KAAKC,UAAYJ,EACjBG,KAAKE,YAAcJ,EACnBE,KAAKjD,aAAegD,EACpBC,KAAKG,aAAe,GACpBpC,EAAUiC,KAAKnM,MAAQmM,KACvBA,KAAKvL,WAAa,GAClBmL,EAAWnL,WAAWyF,SAASkG,GAAeJ,KAAKK,cAAcD,KACjEJ,KAAKL,MAAQ,GACbC,EAAWpL,aAAa0F,SAASoG,GAAUN,KAAKO,SAASD,KACzDN,KAAKzL,QAAU,GACfqL,EAAWrL,QAAQ2F,SAASsG,GAAWR,KAAKS,UAAUD,KACtDR,KAAKnN,MAAQ,GACbmN,KAAK1L,WAAa,GAClBsL,EAAWtL,WAAW4F,SAASwG,GAAeV,KAAKW,cAAcD,KAEjE1G,OAAO/H,OAAO+N,KAAKzL,SAAS2F,SAAS0D,GAAMoC,KAAKY,oBAAoBhD,KACpEoC,KAAKa,wBAETnB,OAAO7L,EAAMiN,GAET,IAAIC,EAAOf,KAAKgB,SAASnN,GAAMmM,MAC/B,OAAOA,KAAKE,YAAYa,GAAOE,IAC3BjB,KAAKG,aAAatM,GAAQoN,EACF,mBAAbH,GACPA,EAASG,MAEd,YACQjB,KAAKG,aAAatM,MAGjC6L,eAAewB,EAAKC,EAAWC,EAAQC,GACnC,IAAIC,EAAW,GACfH,EAAUjH,SAAS6G,IACf,IAAIlN,EAAOkN,EAAKQ,MAAM,KAAKC,MAC3BF,EAASzN,GAAQkN,KAErB,IAAIU,EAAa,GACjBL,EAAOlH,SAAS6G,IACZ,IAAIlN,EAAOkN,EAAKQ,MAAM,KAAKC,MAC3BC,EAAW5N,GAAQ4N,EAAW5N,IAAO,GACrC4N,EAAW5N,GAAM6N,IAAMX,KAE3BM,EAAOnH,SAAS6G,IACZ,IAAIlN,EAAOkN,EAAKQ,MAAM,KAAKC,MAC3BC,EAAW5N,GAAQ4N,EAAW5N,IAAO,GACrC4N,EAAW5N,GAAM8H,IAAMoF,KAG3B/G,OAAOC,KAAKqH,GAAUpH,SAASrG,IAC3B,IAAI8N,EAAWL,EAASzN,GACpB+N,EAAK5B,KAAK1L,WAAWqN,GAGzBT,EAAIW,YAAUhO,IAAS8F,kBAAkB8F,GACrC,OAAGO,gBAAgB3L,EACRuN,KAAMnC,SAEJmC,EAAG5B,QAASP,OAIjCzF,OAAOC,KAAKwH,GAAYvH,SAASrG,IAC7B,IAAI6N,IAACA,EAAG/F,IAAEA,GAAO8F,EAAW5N,GACxBiO,EAAU,GACd,GAAIJ,EAAK,CACL,IAAIK,EAAI/B,KAAK1L,WAAWoN,GACxBR,EAAIF,SAASa,YAAUhO,IAASmM,KAAKnN,MAAM6O,GAC3CI,EAAQJ,IAAM,WACV,YAAiD,IAAvC1B,KAAKG,aAAa0B,YAAUhO,IAC3BmO,QAAQC,QAAQjC,KAAKG,aAAa0B,YAAUhO,KAEpDmM,gBAAgB3L,EACR0N,IAEJA,EAAE/B,OAGjB,GAAIrE,EAAK,CACL,IAAIuG,EAAIlC,KAAK1L,WAAWqH,GACxBmG,EAAQnG,IAAM,SAASpI,GACnB,OAAGyM,gBAAgB3L,EACR6N,EAAE3O,GAEN2O,EAAElC,KAAMzM,IAIvByG,OAAOmI,eAAejB,EAAKW,YAAUhO,GAAOiO,MAGpDpC,YAAYwB,EAAKkB,GACb,IAAId,EAAW,GACfc,EAAQlI,SAAS6G,IACb,IAAIlN,EAAOkN,EAAKQ,MAAM,KAAKC,MAC3BF,EAASzN,GAAQkN,KAGrB/G,OAAOC,KAAKqH,GAAUpH,SAASrG,IAC3B,IAAI8N,EAAWL,EAASzN,GACpB+N,EAAK5B,KAAK1L,WAAWqN,GAGzBT,EAAIrN,GAAQ,YAAY4L,GACpB,OACWmC,KAAMnC,OAO7BC,UAAUc,GACN,IAAIN,EAAcF,KAAKE,YACvBF,KAAKzL,QAAQiM,EAAS3M,MAAQ,MAAM4B,EAChCiK,YAAY7N,GACR,GAAI4D,EAAMsI,UAAUlM,GAAM,OAAO4D,EAAMsI,UAAUlM,GACjD4D,EAAMsI,UAAUlM,GAAMmO,KAEtBA,KAAKnO,GAAKA,EAEVmO,KAAKqC,UAAY5M,EAAM6M,KACvBtC,KAAKuC,mBAAqB9M,EAAM+M,cAChCxC,KAAKG,aAAe,GAExBT,OAAO7L,EAAMiN,GAET,IAAIC,EAAOf,KAAKgB,SAASnN,GAAMmM,MAC/B,OAAOE,EAAYa,GAAOE,IACtBjB,KAAKG,aAAatM,GAAQoN,EACF,mBAAbH,GACPA,EAASG,MAEd,YACQjB,KAAKG,aAAatM,QAIrCmM,KAAKzL,QAAQiM,EAAS3M,MAAMyO,KAAO9B,EAAS3M,KAC5CmM,KAAKzL,QAAQiM,EAAS3M,MAAM2O,cAAgBhC,EAAS9L,cACrDsL,KAAKzL,QAAQiM,EAAS3M,MAAMkK,UAAY,GACxCiC,KAAKQ,EAAS3M,MAAQmM,KAAKzL,QAAQiM,EAAS3M,MAEhD6L,oBAAoB9B,GAChB,IAAIuD,EAAYnH,OAAOC,KAAK+F,KAAK1L,YAAYmO,QAAQ1B,GAAkC,IAA3BA,EAAK2B,QAAQ9E,EAAI0E,QAA0C,IAA3BvB,EAAK2B,QAAQ,WAA8C,IAA3B3B,EAAK2B,QAAQ,WAAiD,IAA9B3B,EAAK2B,QAAQ,cACrKtB,EAASpH,OAAOC,KAAK+F,KAAK1L,YAAYmO,QAAQ1B,GAA0C,IAAnCA,EAAK2B,QAAQ9E,EAAI0E,KAAK,WAC3EjB,EAASrH,OAAOC,KAAK+F,KAAK1L,YAAYmO,QAAQ1B,GAA0C,IAAnCA,EAAK2B,QAAQ9E,EAAI0E,KAAK,WAC3EF,EAAUpI,OAAOC,KAAK+F,KAAK1L,YAAYmO,QAAQ1B,GAA6C,IAAtCA,EAAK2B,QAAQ9E,EAAI0E,KAAK,cAEhF1E,EAAI+E,UAAU3B,SAAW,GACzBhB,KAAK4C,eAAehF,EAAI+E,UAAWxB,EAAWC,EAAQC,GACtDrB,KAAK6C,YAAYjF,EAAKwE,GAE1B1C,wBACI,IAAIyB,EAAYnH,OAAOC,KAAK+F,KAAK1L,YAAYmO,QAAQ1B,IAA8B,IAAvBA,EAAK2B,QAAQ,OACrEtB,EAASpH,OAAOC,KAAK+F,KAAK1L,YAAYmO,QAAQ1B,GAAgC,IAAzBA,EAAK2B,QAAQ,UAClErB,EAASrH,OAAOC,KAAK+F,KAAK1L,YAAYmO,QAAQ1B,GAAgC,IAAzBA,EAAK2B,QAAQ,UAEtE1C,KAAKgB,SAAW,GAChBhB,KAAK4C,eAAe5C,KAAMmB,EAAWC,EAAQC,GAEjD3B,SAASY,GACL,IAAIhB,EAAQ,GACRrN,EAAS,GACToN,EAAM,GACNyD,EAAiB,GACrBxC,EAAQrO,OAAOiI,SAAQ,CAAC3G,EAAO4K,UACD,IAAhB5K,EAAMA,OACZ+L,EAAM/L,EAAMM,MAAQN,EAAMA,MAC1BtB,EAAOsB,EAAMA,OAASA,EAAMM,KAC5BwL,EAAI9L,EAAMM,MAAQN,EAAMA,QAExB+L,EAAM/L,EAAMM,MAAQsK,EACpBlM,EAAOkM,GAAK5K,EAAMM,KAClBwL,EAAI9L,EAAMM,MAAQsK,GAEtB2E,EAAevP,EAAMM,MAAQN,EAAMmB,iBAEvC2K,EAAIC,MAAQA,EACZD,EAAIpN,OAASA,EACboN,EAAIyD,eAAiBA,EAErBzD,EAAIxL,KAAOyM,EAAQzM,KACnBwL,EAAI3K,cAAgB4L,EAAQ5L,cAE5BsL,KAAKL,MAAMW,EAAQzM,MAAQwL,EAC3BW,KAAKM,EAAQzM,MAAQwL,EAEzBK,cAAcU,GACVJ,KAAKvL,WAAW2L,EAAavM,MAAQ,WACjCmM,KAAKnM,KAAOuM,EAAavM,KACzBmM,KAAK1N,QAAU8N,EAAa1L,eAEhCsL,KAAKvL,WAAW2L,EAAavM,MAAM8O,UAAY/O,MAAM+O,UACrD3C,KAAKI,EAAavM,MAAQmM,KAAKvL,WAAW2L,EAAavM,MAE3D6L,cAAcgB,GACVV,KAAKnN,MAAM6N,EAAa7M,MAAQ,IAAI4L,KAEhC,IAAIsD,EAAmB,GAKvB,OAJArC,EAAa9L,WAAWsF,SAAQ,CAAC8I,EAAO7E,KACpC4E,EAAiB5E,GAAKG,EAAemB,EAAKtB,GAAI6E,EAAO3O,MAGlD,CACH0M,KAAMvB,EAAmBQ,KAAKnM,KAAM6M,EAAa7M,KAAMkP,GACvDlG,OAAStJ,GAAQgH,EAAahH,EAAOmN,EAAa7L,WAAYR,KAGtE2L,KAAK1L,WAAWoM,EAAa7M,MAAQ,IAAI4L,IAC9BO,KAAKC,UAAUD,KAAKnN,MAAM6N,EAAa7M,SAAS4L,IAAOwD,MAAKC,IACjE,GAAIA,EAAIzP,OAASyP,EAAIxP,QAAQ,GAAGD,MAC5B,MAAMyP,EAAIzP,OAASyP,EAAIxP,QAAQ,GAAGD,MAEtC,OAAOyP,EAAIxP,QAAQ,GAAGH,SAG5ByM,KAAK1L,WAAWoM,EAAa7M,MAAMa,cAAgBgM,EAAahM,eCxPxE,SAAS8K,EAAmBxM,EAASC,EAAWwM,GAI5C,OAHAA,EAAOA,EAAKvB,KAAI,CAACY,EAAKX,IACX1E,EAAMpG,SAASqK,OAAO,CAACpK,SAAU6K,EAAG5K,MAAOuL,MAE/CrF,EAAM1G,cAAc2K,OAAO,CAAC1K,QAAAA,EAASC,UAAAA,EAAWG,UAAWqM,IAS/D,SAAS0D,IAEZ,MAAO,CACHpC,KAAMvB,EAAmB,OAAQ,cAFd,IAGnB3C,OAAStJ,GAAQ8G,EAASa,MAAM3H,IAyBjC,SAAS6P,IAEZ,MAAO,CACHrC,KAAMvB,EAAmB,OAAQ,cAFd,IAGnB3C,OAAStJ,GAAQkG,EAAMtF,SAAS0I,OAAOtJ,IA4BxC,SAAS8P,EAAcxR,EAAIyR,GAK9B,MAAO,CACHvC,KAAMvB,EAAmB,OAAQ,gBALd,CACnBpB,EAASrD,OAAOlJ,GAChBuM,EAASzD,MAAM2I,KAIfzG,OAAQ,MAWT,SAAS0G,EAAa1R,GAIzB,MAAO,CACHkP,KAAMvB,EAAmB,OAAQ,eAJd,CACnBpB,EAASrD,OAAOlJ,KAIhBgL,OAAQ,kEAvET,WAEH,MAAO,CACHkE,KAAMvB,EAAmB,OAAQ,YAFd,IAGnB3C,OAAStJ,GAAQkG,EAAMlH,OAAOsK,OAAOtJ,6BA0BtC,SAAmBwN,GAItB,MAAO,CACHA,KAAMvB,EAAmB,OAAQ,YAJd,CACnB,CAAC/E,OAAQhB,EAAM1G,cAAcgM,OAAOgC,GAAM/B,YAI1CnC,OAAStJ,GAAQkG,EAAM7B,OAAOiF,OAAOtJ,+CA8CtC,WAEH,MAAO,CACHwN,KAAMvB,EAAmB,OAAQ,cAFd,IAGnB3C,OAAStJ,GACMkG,EAAMnC,KAAKuF,OAAOtJ,GAAO8D,MACnB6G,KAAK3C,KAClBA,EAAQ9B,EAAMrC,MAAMyF,OAAOtB,GAAOlE,OAC5B,GAAKgD,EAASa,MAAMK,EAAM,IAChCA,EAAM,GAAKlB,EAASY,OAAOM,EAAM,IACjCA,EAAM,GAAKlB,EAASY,OAAOM,EAAM,IAC1BA,2BAahB,WAEH,MAAO,CACHwF,KAAMvB,EAAmB,OAAQ,uBAFd,IAGnB3C,OAAStJ,IACQ,CACTwI,EAAG,cACHC,EAAG,SACHC,EAAG,kBACHC,EAAG,YACHC,EAAG,aAEP5I,EAAQ8G,EAASO,OAAOrH,SC9IpC,MAAMiQ,EAAiB,CACnB3P,KAAM,UACN4P,KAAM,YACNC,QAAS,IACTC,WAAY,MACZC,WAAY,EACZC,UAAW,GACXC,YAAa,GACbC,wBAAwB,kBAGb,MACXrE,YAAYrO,GACR2O,KAAK3O,QAAU,IAAKmS,KAAmBnS,GAEvC2O,KAAKgE,cAAgB,GACrBhE,KAAKiE,YAAc,GACnBjE,KAAKkE,UAAY,KACjBlE,KAAKmE,aAAe,KACpBnE,KAAK5L,SAAW,CAAEgQ,WAAYC,GAC9BrE,KAAKsE,QAAU,GAGnB5E,aAKI,aAJMjG,EAAMC,aACNsG,KAAKuE,2BACLvE,KAAKwE,8BACLxE,KAAKyE,iBACJzE,KAGXN,QAGI,IAFAM,KAAKkE,UAAUQ,QACX1E,KAAKmE,cAAcnE,KAAKmE,aAAaO,QAClC1E,KAAKgE,cAAcW,QACtB3E,KAAKgE,cAAcxC,MAAMoD,OAAO,sBAEpC5E,KAAKiE,YAAc,GACnBjE,KAAKsE,QAAU,GAGnB5E,qBACI,OAAO,IAAIsC,SAAQ,CAACC,EAAS2C,KACzB,MAAMC,EAAM,QAAU7E,KAAK3O,QAAQoS,KAAO,IAAMzD,KAAK3O,QAAQqS,QAAQoB,WAAY,SAAW9E,KAAK3O,QAAQwC,KACzGmM,KAAKkE,UAAY,IAAIa,UAAUF,EAAK7E,KAAK3O,QAAQyS,YAAa9D,KAAK3O,QAAQwS,WAC3E7D,KAAKkE,UAAUc,WAAa,cAC5BhF,KAAKkE,UAAUe,iBAAiB,SAAUC,IACtCN,EAAOM,EAAMzR,OACb0R,QAAQ1R,MAAM,kCAAmCyR,GAC7ClF,KAAK3O,QAAQ+T,uBAAuBpF,KAAK0E,WAEjD1E,KAAKkE,UAAUe,iBAAiB,SAAUC,IACtC,MAAM5S,EAAU,yBAAyB4S,EAAMrP,QAAQqP,EAAMG,SAC7DT,EAAO,IAAIhR,MAAMtB,IACjB0N,KAAK0E,QACLS,QAAQ1R,MAAMnB,MAElB0N,KAAKkE,UAAUe,iBAAiB,WAAYC,IACxC,IACIlF,KAAKsF,UAAUJ,EAAMK,MACvB,MAAOtH,GACL+B,KAAKwF,eAAevH,GACpB2G,EAAO3G,OAIf+B,KAAKkE,UAAUe,iBAAiB,QAAQtL,UACpC,MAAML,QAAiB0G,KAAKyF,KAAKC,KACjC1F,KAAK2F,SAAWrM,EAAS5F,QAAQ,GAAGH,MAAMuR,SAAS,UACnD7C,EAAQjC,KAAK2F,YACd,CAACC,MAAM,OAIlBlG,wBACI,OAAO,IAAIsC,SAAQ,CAACC,EAAS2C,KACzB,MAAMC,EAAM,QAAU7E,KAAK3O,QAAQoS,KAAO,IAAMzD,KAAK3O,QAAQsS,WAAWmB,WAAY,OAAS9E,KAAK2F,SAClG3F,KAAKmE,aAAe,IAAIY,UAAUF,EAAK7E,KAAK3O,QAAQyS,YAAa9D,KAAK3O,QAAQwS,WAC9E7D,KAAKmE,aAAaa,WAAa,cAC/BhF,KAAKmE,aAAac,iBAAiB,SAAUC,IACzCN,EAAOM,EAAMzR,OACb0R,QAAQ1R,MAAM,qCAAsCyR,GAChDlF,KAAK3O,QAAQ+T,uBAAuBpF,KAAK0E,WAEjD1E,KAAKmE,aAAac,iBAAiB,SAAUC,GAAQC,QAAQU,KAAK,2BAA4BX,KAC9FlF,KAAKmE,aAAac,iBAAiB,WAAYC,IAC3C,IACIlF,KAAK8F,gBAAgBZ,EAAMK,MAC7B,MAAOtH,GAEL2G,IACAO,QAAQ1R,MAAM,kDAAmDwK,OAGzE+B,KAAKmE,aAAac,iBAAiB,OAAQhD,EAAS,CAAC2D,MAAM,OAInElG,8BAC2BM,KAAKyF,KAAKM,MACPrS,QAAQ,GAAGH,MAAMa,SAAS8J,KAAKlL,GACrD,IAAIqB,EACArB,GACC+N,GAAOf,KAAKyF,KAAK1E,KAClB,CAACA,EAAMiF,EAAQC,IAASjG,KAAKkG,UAAUnF,EAAMiF,EAAQC,KACpDnO,GAASkI,KAAKmG,SAASrO,OAIvBoC,SAASlH,IACdgN,KAAK5L,SAASyN,YAAU7O,EAAQa,OAASb,KAIjD0M,cAAcjF,EAAQ2L,GAClB3L,EAASyE,SAAOC,KAAK1E,GAErB,IACI,OAAO2L,EAAQvJ,OAAOpC,GAE1B,MAAOhH,GACH,IAAI4S,EACJ,IACIA,EAAU5M,EAAM7F,MAAMiJ,OAAOpC,GAEjC,MAAO6L,GACH,IACID,EAAU5L,EAAOqK,SAAS,SAE9B,MAAOyB,GACHF,EAAU,8BAAgCE,EAAajU,QACvD+T,EAAU5S,EAAMnB,QAAU,KAAO+T,EAAU,KAAO5S,EAAM+S,SAIhE,OADArB,QAAQ1R,MAAMA,EAAO4S,GACdrG,KAAKwF,eAAea,IAInC3G,UAAU6F,GACN,MAAMjM,EAAW0G,KAAKyG,cAAclB,EAAM9L,EAAMjG,UAChD,GAAI8F,EAAJ,CAEA,GAAGA,EAAS7F,MACR,OAAOuM,KAAKwF,eAAelM,EAAS7F,OAYxC,GATA6F,EAAS5F,QAAQwG,SAAShG,IACtB,MAAM2I,EAASmD,KAAKiE,YAAYzC,MAChC,QAAehE,IAAXX,EACA,MAAM,IAAIjJ,MAAM,8BACRM,EAAOT,OAA2B,mBAAXoJ,IAC/B3I,EAAOX,MAAQsJ,EAAOqC,SAAOC,KAAKjL,EAAOX,YAI7CyM,KAAKgE,cAAcW,OAAS,EAAG,CAE/B,OADgB3E,KAAKgE,cAAcxC,MACpBS,QAAQ3I,KAG/BoG,eAAegH,GAKX,GAHAvB,QAAQ1R,MAAM,gBAAiBiT,GAC/B1G,KAAKiE,YAAYzC,MAEbxB,KAAKgE,cAAcW,OAAS,EAAG,CAE/B,OADgB3E,KAAKgE,cAAcxC,MACpBoD,OAAO8B,IAI9BhH,gBAAgB6F,GACZ,MAAMhM,EAAeyG,KAAKyG,cAAclB,EAAM9L,EAAMzF,cAChDuF,GAEqC,IAArCS,OAAOC,KAAK+F,KAAKsE,SAASK,QAG9BpL,EAAa7F,QAAQwG,SAAS8L,IAC1B,GAAIA,EAAO9R,OAAOT,MAEd,OAEJ,MAAMqE,EAASkI,KAAKsE,QAAQ0B,EAAOnU,GAAGiT,YACtC,IAAKhN,EAED,YADAqN,QAAQ1R,MAAM,6BAA8BuS,EAAOnU,IAIvD,MAAM8U,EAAe7O,EAAO+E,OAAOmJ,EAAO9R,OAAOX,OACjDuE,EAAO8O,UAAU1M,SAAS2M,IACtB,IACIA,EAAEF,GACJ,MAAM1I,GACJkH,QAAQ1R,MAAMwK,UAO9ByB,WAAW7M,GACP,aAAamN,KAAK8G,YAAYjU,GAGlC6M,YAAY7M,GACR,IAAKA,EACD,MAAM,IAAIe,MAAM,gEAEpB,GAAqB,iBAAVf,EACP,MAAM,IAAIe,MAAM,+FAEdf,aAAiBkU,QACnBlU,EAAQ,CAACA,IAGb,MAAMmU,EAAiB,GACvBnU,EAAMqH,SAAS6G,IACX,QAAyB,IAAdA,EAAKA,KACZ,MAAM,IAAInN,MAAM,2EAEpB,QAA2B,IAAhBmN,EAAKlE,OACZ,MAAM,IAAIjJ,MAAM,6EAEpBoM,KAAKiE,YAAYgD,OAAO,EAAG,EAAGlG,EAAKlE,QACnCmK,EAAezH,KAAKwB,EAAKA,SAE7B,MAAMmG,EAAMzN,EAAM7G,QAAQ8K,OAAO,CAAC7K,MAAOmU,IACnCvM,EAAShB,EAAM7G,QAAQmM,OAAOmI,GAAKlI,SACnC4H,EAAY,CAChB3E,QAAS,IAAIkD,QAAQ1R,MAAM,wBAC3BmR,OAAQ,IAAIO,QAAQ1R,MAAM,yBAK5B,OAHAuM,KAAKgE,cAAciD,OAAO,EAAG,EAAGL,GAEhC5G,KAAKkE,UAAUuB,KAAKhL,GACb,IAAIuH,SAAQ,CAACC,EAAS2C,KAC3BgC,EAAU3E,QAAUA,EACpB2E,EAAUhC,OAASA,KAIzBlF,gBAAgBzM,EAAWkU,EAAUC,GACjC,GAAInU,aAAqB8T,MACrB,MAAM,IAAInT,MAAM,yEAEpB,IAAKX,EAAU8N,KACX,MAAM,IAAInN,MAAM,8CAIpB,MAAMkE,QAAekI,KAAK5L,SAASjD,KAAK+U,UAAUjT,EAAU8N,MAE5D,KAAOf,KAAKsE,QAAQxM,EAAOjG,GAAGiT,aAAe9E,KAAKsE,QAAQxM,EAAOjG,GAAGiT,YAAYuC,eACtErH,KAAKuD,aAAavD,KAAKsE,QAAQxM,EAAOjG,GAAGiT,aAC/ChN,QAAekI,KAAK5L,SAASjD,KAAK+U,UAAUjT,EAAU8N,MAG1D,GAAIjJ,EAAOrE,MACP,MAAMqE,EAAOrE,MAGjB,OAAOuM,KAAKsH,eAAerU,EAAW6E,EAAQqP,EAAUC,GAE5D1H,eAAezM,EAAW6E,EAAQqP,EAAUC,GACxC,IAAIlF,EAAIlC,KAAKsE,QAAQxM,EAAOjG,GAAGiT,YAE1B5C,IAAKA,EAAEmF,UACRnF,EAAI,CACA0E,UAAW,GACXW,gBAAiB,GACjB1K,OAAQ5J,EAAU4J,OAClBhL,GAAIiG,EAAOjG,GACXoU,OAAQ,IAAIjG,KAAKuD,aAAarB,GAC9BsF,QAAUC,GAAIzH,KAAKqD,cAAcnB,EAAGuF,IAIT,IAA5BzH,KAAK3O,QAAQuS,YACZ1B,EAAEsF,QAAQxH,KAAK3O,QAAQuS,aAI5BuD,IACCnH,KAAKyF,KAAKxS,GAAWgQ,MAAMwE,GAAIA,EAAE/T,QAAQ,GAAGH,QAAO0P,KAAKkE,GACxDjF,EAAE0E,UAAUrH,KAAK4H,IAElBC,GACClF,EAAEqF,gBAAgBhI,KAAK6H,GAE3BpH,KAAKsE,QAAQxM,EAAOjG,GAAGiT,YAAc5C,EACrC,MAAMwF,EAAK,CACP3G,KAAM9N,EAAU8N,KAChBjJ,OAAQoK,EACRJ,QAASqF,EACTlB,OAAQ,KACJyB,EAAGL,SAAU,EACbK,EAAG5P,OAAO8O,UAAYc,EAAG5P,OAAO8O,UAAUnE,QAAQtE,GAAIA,IAAIuJ,EAAG5F,UACxD4F,EAAG5P,OAAO8O,UAAUjC,QAAS+C,EAAG5P,OAAOmO,WAGpD,OAAOyB,EAEXhI,eAAe5H,GACX,IAAIoK,EAAIlC,KAAKsE,QAAQxM,EAAOjG,GAAGiT,YAE1B5C,IAAKA,EAAEmF,UACRnF,EAAI,CACA0E,UAAW,GACXW,gBAAiB,GACjB1K,OAAQ,OACRhL,GAAIiG,EAAOjG,GACXoU,OAAQ,IAAIjG,KAAKuD,aAAarB,GAC9BsF,QAAUC,GAAIzH,KAAKqD,cAAcnB,EAAGuF,IAIT,IAA5BzH,KAAK3O,QAAQuS,YACZ1B,EAAEsF,QAAQxH,KAAK3O,QAAQuS,aAI/B,MAAM+D,EAAW,GACX7F,EAAU,KACZ,IAAK,MAAM8F,KAAKD,EACZ,IACIC,IACF,MAAM3J,GACJkH,QAAQ1R,MAAMwK,KAI1BiE,EAAE0E,UAAUrH,KAAKuC,GAEjB9B,KAAKsE,QAAQxM,EAAOjG,GAAGiT,YAAc5C,EAErC,MAAMwF,EAAK,CACPG,SAAS,EACT/P,OAAQoK,EACRyF,SAAUA,EACVG,OAAQnO,MAAOoO,IACO,mBAAPA,GAAmBL,EAAGC,SAASpI,KAAKwI,GACxC/H,KAAK5L,SAASjD,KAAK6W,YAAYlQ,EAAOjG,IAAIoR,MAAK,KAAKyE,EAAGG,SAAU,MAE5E5B,OAAQ,KACJyB,EAAGL,SAAU,EACbK,EAAG5P,OAAO8O,UAAYc,EAAG5P,OAAO8O,UAAUnE,QAAQtE,GAAIA,IAAI2D,IACrD4F,EAAG5P,OAAO8O,UAAUjC,QAAS+C,EAAG5P,OAAOmO,WAGpD,OAAOyB,EAEXhI,oBAAoB5H,EAAQwL,GACxB,MAAMkE,EAAUS,EAA0BnQ,EAAOjG,GAAIyR,GAE/ChK,QAAiB0G,KAAKyF,KAAK+B,GAEjC,GAAIlO,EAAS7F,MACT,MAAM,IAAIG,MAAM0F,EAAS7F,OAE7B,MAAMyU,EAAc5O,EAAS5F,QAAQ,GACrC,GAAIwU,EAAYzU,MACZ,MAAM,IAAIG,MAAMsU,EAAYzU,OAIpCiM,mBAAmB5H,GACfA,EAAOuP,SAAU,EACjBvP,EAAO8O,UAAY,GACnB9O,EAAOyP,gBAAgBrN,SAAS2M,IAC5B,IACIA,IACF,MAAM5I,GACJkH,QAAQ1R,MAAMwK,OAGtBnG,EAAOyP,gBAAkB,GAEzB,MAAMhE,EAAe4E,EAAyBrQ,EAAOjG,IAE/CyH,QAAiB0G,KAAKyF,KAAKlC,GAEjC,GAAIjK,EAAS7F,MACT,MAAM,IAAIG,MAAM0F,EAAS7F,OAE7B,MAAMyU,EAAc5O,EAAS5F,QAAQ,GACrC,GAAIwU,EAAYzU,MACZ,MAAM,IAAIG,MAAMsU,EAAYzU"}